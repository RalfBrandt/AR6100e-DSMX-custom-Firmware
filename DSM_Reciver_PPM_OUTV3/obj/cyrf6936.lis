                        .module cyrf6936.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./cyrf6936.c
 0000                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\cyrf6936.c
 0000                   .dbfunc e GPIO_ISR _GPIO_ISR fV
 0000           _GPIO_ISR::
 0000                   .dbline -1
 0000 08                push A
 0001 5100              mov A,[__r0]
 0003 08                push A
 0004                   .dbline 11
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "CYRF6936.h"
 0004           ; #include "delay.h"
 0004           ; #include "timer.h"
 0004           ; 
 0004           ; volatile BOOL CY_irq;
 0004           ; 
 0004           ; //called on a GPIO interrupt
 0004           ; #pragma interrupt_handler GPIO_ISR
 0004           ; void GPIO_ISR(void )
 0004           ; {
 0004                   .dbline 12
 0004           ;       if (PRT0DR&CY_IRQPin_MASK) //Check if  pin went high
 0004 5D00              mov A,REG[0]
 0006 5300              mov [__r0],A
 0008 470040            tst [__r0],64
 000B A004              jz L10
 000D                   .dbline 14
 000D           ;       {
 000D           ;               CY_irq=TRUE;
 000D                   .dbline 14
 000D 550001            mov [_CY_irq],1
 0010                   .dbline 15
 0010           ;       }
 0010           L10:
 0010                   .dbline -2
 0010           L9:
 0010 18                pop A
 0011 5300              mov [__r0],A
 0013 18                pop A
 0014                   .dbline 0 ; func end
 0014 7E                reti
 0015                   .dbend
 0015                   .dbfunc e CYRF_Init _CYRF_Init fV
 0015           _CYRF_Init::
 0015                   .dbline -1
 0015                   .dbline 21
 0015           ; }
 0015           ; 
 0015           ; 
 0015           ; //initialize cyrf chip
 0015           ; void CYRF_Init(void )
 0015           ; {
 0015                   .dbline 22
 0015           ;       RST_Start();
 0015 10                push X
 0016 7C0000            xcall _RST_Start
 0019                   .dbline 23
 0019           ;       CS_PIN_Start();
 0019 7C0000            xcall _CS_PIN_Start
 001C                   .dbline 24
 001C           ;       SPIM_1_Start(SPIM_1_SPIM_MODE_0 | SPIM_1_SPIM_MSB_FIRST);
 001C 5000              mov A,0
 001E 7C0000            xcall _SPIM_1_Start
 0021                   .dbline 29
 0021           ;       //manua inline
 0021           ;       //CYRF_Reset();
 0021           ;       //reset cyrf chip
 0021           ;       //void CYRF_Reset(void)
 0021           ;       {
 0021                   .dbline 30
 0021           ;           RS_HI();
 0021 7C0000            xcall _RST_On
 0024                   .dbline 31
 0024           ;               CS_HI();
 0024 7C0000            xcall _CS_PIN_On
 0027 20                pop X
 0028                   .dbline 32
 0028           ;           Timer_Wait_ms(2);
 0028 5002              mov A,2
 002A 08                push A
 002B 7C0000            xcall _Timer_Wait_ms
 002E 38FF              add SP,-1
 0030                   .dbline 33
 0030           ;           RS_LO();
 0030 10                push X
 0031 7C0000            xcall _RST_Off
 0034 20                pop X
 0035                   .dbline 34
 0035           ;           Timer_Wait_ms(10);
 0035 500A              mov A,10
 0037 08                push A
 0038 7C0000            xcall _Timer_Wait_ms
 003B                   .dbline 35
 003B           ;       }
 003B                   .dbline 36
 003B           ;     CYRF_WriteRegister(CYRF_XACT_CFG, (CYRF_ACK_TO_12x));
 003B 5002              mov A,2
 003D 08                push A
 003E 500F              mov A,15
 0040 08                push A
 0041 9010              xcall _CYRF_WriteRegister
 0043 38FD              add SP,-3
 0045                   .dbline 37
 0045           ;     Delay50uTimes(100);
 0045 10                push X
 0046 5064              mov A,100
 0048 7C0000            xcall _Delay50uTimes
 004B 20                pop X
 004C                   .dbline 38
 004C           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); 
 004C 43E020            or REG[0xe0],32
 004F                   .dbline 39
 004F           ;       CY_irq=FALSE;
 004F 550000            mov [_CY_irq],0
 0052                   .dbline -2
 0052           L12:
 0052                   .dbline 0 ; func end
 0052 7F                ret
 0053                   .dbend
 0053                   .dbfunc e CYRF_WriteRegister _CYRF_WriteRegister fV
 0053           ;            val -> X-5
 0053           ;            reg -> X-4
 0053           _CYRF_WriteRegister::
 0053                   .dbline -1
 0053 10                push X
 0054 4F                mov X,SP
 0055                   .dbline 45
 0055           ; }
 0055           ; 
 0055           ; 
 0055           ; //write a singel register
 0055           ; void CYRF_WriteRegister(BYTE reg, BYTE val)
 0055           ; {
 0055                   .dbline 46
 0055           ; CYRF_WriteRegisterMultiD(reg,&val,1);
 0055 5001              mov A,1
 0057 08                push A
 0058 5A00              mov [__r1],X
 005A 160005            sub [__r1],5
 005D 5100              mov A,[__r0]
 005F 08                push A
 0060 5100              mov A,[__r1]
 0062 08                push A
 0063 52FC              mov A,[X-4]
 0065 08                push A
 0066 9069              xcall _CYRF_WriteRegisterMultiD
 0068 38FC              add SP,-4
 006A                   .dbline -2
 006A           L13:
 006A 20                pop X
 006B                   .dbline 0 ; func end
 006B 7F                ret
 006C                   .dbsym l val -5 c
 006C                   .dbsym l reg -4 c
 006C                   .dbend
 006C                   .dbfunc e CYRF_WriteRegisterMulti _CYRF_WriteRegisterMulti fV
 006C           ;              n -> X+0
 006C           ;            cnt -> X-7
 006C           ;           data -> X-6
 006C           ;            reg -> X-4
 006C           _CYRF_WriteRegisterMulti::
 006C                   .dbline -1
 006C 10                push X
 006D 4F                mov X,SP
 006E 3801              add SP,1
 0070                   .dbline 52
 0070           ; }
 0070           ; 
 0070           ; 
 0070           ; //write a single register cnt times
 0070           ; void CYRF_WriteRegisterMulti(BYTE reg,BYTE const data[] , BYTE cnt)
 0070           ; {
 0070                   .dbline 54
 0070           ;       BYTE n;
 0070           ;     CS_LO();
 0070 10                push X
 0071 7C0000            xcall _CS_PIN_Off
 0074 20                pop X
 0075           L15:
 0075                   .dbline 56
 0075           ;       //wait for buffer empty
 0075           ;       while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 0075           L16:
 0075                   .dbline 56
 0075 10                push X
 0076 7C0000            xcall _SPIM_1_bReadStatus
 0079 20                pop X
 007A 5300              mov [__r0],A
 007C 470010            tst [__r0],16
 007F AFF5              jz L15
 0081                   .dbline 58
 0081           ;       //write address
 0081           ;       SPIM_1_SendTxData(CYRF_WRITE_BIT|reg);
 0081 52FC              mov A,[X-4]
 0083 2980              or A,-128
 0085 10                push X
 0086 7C0000            xcall _SPIM_1_SendTxData
 0089 20                pop X
 008A                   .dbline 59
 008A           ;     for(n = 0; n < cnt; n++)
 008A 560000            mov [X+0],0
 008D 8028              xjmp L21
 008F           L22:
 008F                   .dbline 62
 008F           ;     {
 008F           ;               //wait for buffer empty
 008F           ;               while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 008F           L23:
 008F                   .dbline 62
 008F 10                push X
 0090 7C0000            xcall _SPIM_1_bReadStatus
 0093 20                pop X
 0094 5300              mov [__r0],A
 0096 470010            tst [__r0],16
 0099 AFF5              jz L22
 009B                   .dbline 64
 009B           ;           //write data
 009B           ;               SPIM_1_SendTxData(data[n]);
 009B 5200              mov A,[X+0]
 009D 5300              mov [__r1],A
 009F 550000            mov [__r0],0
 00A2 52FB              mov A,[X-5]
 00A4 0400              add [__r1],A
 00A6 52FA              mov A,[X-6]
 00A8 0C00              adc [__r0],A
 00AA 5100              mov A,[__r0]
 00AC 10                push X
 00AD 5800              mov X,[__r1]
 00AF 28                romx
 00B0 7C0000            xcall _SPIM_1_SendTxData
 00B3 20                pop X
 00B4                   .dbline 65
 00B4           ;     }
 00B4           L19:
 00B4                   .dbline 59
 00B4 7700              inc [X+0]
 00B6           L21:
 00B6                   .dbline 59
 00B6 5200              mov A,[X+0]
 00B8 3BF9              cmp A,[X-7]
 00BA CFD4              jc L23
 00BC           X0:
 00BC           L25:
 00BC                   .dbline 66
 00BC           ;       while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
 00BC           L26:
 00BC                   .dbline 66
 00BC 10                push X
 00BD 7C0000            xcall _SPIM_1_bReadStatus
 00C0 20                pop X
 00C1 5300              mov [__r0],A
 00C3 470020            tst [__r0],32
 00C6 AFF5              jz L25
 00C8                   .dbline 67
 00C8           ;       CS_HI();
 00C8 10                push X
 00C9 7C0000            xcall _CS_PIN_On
 00CC 20                pop X
 00CD                   .dbline -2
 00CD           L14:
 00CD 38FF              add SP,-1
 00CF 20                pop X
 00D0                   .dbline 0 ; func end
 00D0 7F                ret
 00D1                   .dbsym l n 0 c
 00D1                   .dbsym l cnt -7 c
 00D1                   .dbsym l data -6 pkc
 00D1                   .dbsym l reg -4 c
 00D1                   .dbend
 00D1                   .dbfunc e CYRF_WriteRegisterMultiD _CYRF_WriteRegisterMultiD fV
 00D1           ;              n -> X+0
 00D1           ;            cnt -> X-7
 00D1           ;           data -> X-6
 00D1           ;            reg -> X-4
 00D1           _CYRF_WriteRegisterMultiD::
 00D1                   .dbline -1
 00D1 10                push X
 00D2 4F                mov X,SP
 00D3 3801              add SP,1
 00D5                   .dbline 70
 00D5           ; }
 00D5           ; void CYRF_WriteRegisterMultiD(BYTE reg, BYTE data[], BYTE cnt)
 00D5           ; {
 00D5                   .dbline 72
 00D5           ;       BYTE n;
 00D5           ;     CS_LO();
 00D5 10                push X
 00D6 7C0000            xcall _CS_PIN_Off
 00D9 20                pop X
 00DA           L29:
 00DA                   .dbline 74
 00DA           ;       //wait for buffer empty
 00DA           ;       while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 00DA           L30:
 00DA                   .dbline 74
 00DA 10                push X
 00DB 7C0000            xcall _SPIM_1_bReadStatus
 00DE 20                pop X
 00DF 5300              mov [__r0],A
 00E1 470010            tst [__r0],16
 00E4 AFF5              jz L29
 00E6                   .dbline 76
 00E6           ;       //write address
 00E6           ;       SPIM_1_SendTxData(CYRF_WRITE_BIT|reg);
 00E6 52FC              mov A,[X-4]
 00E8 2980              or A,-128
 00EA 10                push X
 00EB 7C0000            xcall _SPIM_1_SendTxData
 00EE 20                pop X
 00EF                   .dbline 77
 00EF           ;     for(n = 0; n < cnt; n++)
 00EF 560000            mov [X+0],0
 00F2 801E              xjmp L35
 00F4           L36:
 00F4                   .dbline 80
 00F4           ;     {
 00F4           ;               //wait for buffer empty
 00F4           ;               while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 00F4           L37:
 00F4                   .dbline 80
 00F4 10                push X
 00F5 7C0000            xcall _SPIM_1_bReadStatus
 00F8 20                pop X
 00F9 5300              mov [__r0],A
 00FB 470010            tst [__r0],16
 00FE AFF5              jz L36
 0100                   .dbline 82
 0100           ;           //write data
 0100           ;               SPIM_1_SendTxData(data[n]);
 0100 5200              mov A,[X+0]
 0102 5300              mov [__r1],A
 0104 52FB              mov A,[X-5]
 0106 0400              add [__r1],A
 0108 3E00              mvi A,[__r1]
 010A 10                push X
 010B 7C0000            xcall _SPIM_1_SendTxData
 010E 20                pop X
 010F                   .dbline 83
 010F           ;     }
 010F           L33:
 010F                   .dbline 77
 010F 7700              inc [X+0]
 0111           L35:
 0111                   .dbline 77
 0111 5200              mov A,[X+0]
 0113 3BF9              cmp A,[X-7]
 0115 CFDE              jc L37
 0117           X1:
 0117           L39:
 0117                   .dbline 84
 0117           ;       while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
 0117           L40:
 0117                   .dbline 84
 0117 10                push X
 0118 7C0000            xcall _SPIM_1_bReadStatus
 011B 20                pop X
 011C 5300              mov [__r0],A
 011E 470020            tst [__r0],32
 0121 AFF5              jz L39
 0123                   .dbline 85
 0123           ;       CS_HI();
 0123 10                push X
 0124 7C0000            xcall _CS_PIN_On
 0127 20                pop X
 0128                   .dbline -2
 0128           L28:
 0128 38FF              add SP,-1
 012A 20                pop X
 012B                   .dbline 0 ; func end
 012B 7F                ret
 012C                   .dbsym l n 0 c
 012C                   .dbsym l cnt -7 c
 012C                   .dbsym l data -6 pc
 012C                   .dbsym l reg -4 c
 012C                   .dbend
 012C                   .dbfunc e CYRF_WriteRegisterInc _CYRF_WriteRegisterInc fV
 012C           ;            cnt -> X-7
 012C           ;           data -> X-6
 012C           ;            reg -> X-4
 012C           _CYRF_WriteRegisterInc::
 012C                   .dbline -1
 012C 10                push X
 012D 4F                mov X,SP
 012E                   .dbline 90
 012E           ; }
 012E           ; 
 012E           ; 
 012E           ; void CYRF_WriteRegisterInc(BYTE reg,BYTE  data[] , BYTE cnt)
 012E           ; {
 012E                   .dbline 91
 012E           ; CYRF_WriteRegisterMultiD(CYRF_INCR_BIT| reg,data,cnt);
 012E 52F9              mov A,[X-7]
 0130 08                push A
 0131 52FA              mov A,[X-6]
 0133 08                push A
 0134 52FB              mov A,[X-5]
 0136 08                push A
 0137 52FC              mov A,[X-4]
 0139 2940              or A,64
 013B 08                push A
 013C 9F93              xcall _CYRF_WriteRegisterMultiD
 013E 38FC              add SP,-4
 0140                   .dbline -2
 0140           L42:
 0140 20                pop X
 0141                   .dbline 0 ; func end
 0141 7F                ret
 0142                   .dbsym l cnt -7 c
 0142                   .dbsym l data -6 pc
 0142                   .dbsym l reg -4 c
 0142                   .dbend
 0142                   .dbfunc e CYRF_ReadRegister _CYRF_ReadRegister fc
 0142           ;           data -> X+0
 0142           ;            reg -> X-4
 0142           _CYRF_ReadRegister::
 0142                   .dbline -1
 0142 10                push X
 0143 4F                mov X,SP
 0144 3801              add SP,1
 0146                   .dbline 96
 0146           ; }
 0146           ; 
 0146           ; //read a singele register 
 0146           ; BYTE CYRF_ReadRegister(BYTE reg)
 0146           ; {
 0146                   .dbline 98
 0146           ; BYTE data;
 0146           ;       CYRF_ReadRegisterMulti(reg,&data,1);
 0146 5001              mov A,1
 0148 08                push A
 0149 5100              mov A,[__r0]
 014B 08                push A
 014C 10                push X
 014D 52FC              mov A,[X-4]
 014F 08                push A
 0150 9008              xcall _CYRF_ReadRegisterMulti
 0152 38FC              add SP,-4
 0154                   .dbline 99
 0154           ;       return data;
 0154 5200              mov A,[X+0]
 0156                   .dbline -2
 0156           L43:
 0156 38FF              add SP,-1
 0158 20                pop X
 0159                   .dbline 0 ; func end
 0159 7F                ret
 015A                   .dbsym l data 0 c
 015A                   .dbsym l reg -4 c
 015A                   .dbend
 015A                   .dbfunc e CYRF_ReadRegisterMulti _CYRF_ReadRegisterMulti fV
 015A           ;              n -> X+1
 015A           ;         status -> X+0
 015A           ;            cnt -> X-7
 015A           ;           data -> X-6
 015A           ;            reg -> X-4
 015A           _CYRF_ReadRegisterMulti::
 015A                   .dbline -1
 015A 10                push X
 015B 4F                mov X,SP
 015C 3802              add SP,2
 015E                   .dbline 104
 015E           ; }
 015E           ; 
 015E           ; //read a singel register cnt times
 015E           ; void CYRF_ReadRegisterMulti(BYTE reg, BYTE data[], BYTE cnt)
 015E           ; {
 015E                   .dbline 107
 015E           ;       BYTE n;
 015E           ;       BYTE status;
 015E           ;     CS_LO();
 015E 10                push X
 015F 7C0000            xcall _CS_PIN_Off
 0162 20                pop X
 0163           L45:
 0163                   .dbline 109
 0163           ;       //wait for buffer empty
 0163           ;       while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 0163           L46:
 0163                   .dbline 109
 0163 10                push X
 0164 7C0000            xcall _SPIM_1_bReadStatus
 0167 20                pop X
 0168 5300              mov [__r0],A
 016A 470010            tst [__r0],16
 016D AFF5              jz L45
 016F                   .dbline 111
 016F           ;       //write address
 016F           ;       SPIM_1_SendTxData(reg);
 016F 10                push X
 0170 52FC              mov A,[X-4]
 0172 7C0000            xcall _SPIM_1_SendTxData
 0175 20                pop X
 0176           L48:
 0176                   .dbline 113
 0176           ;       //wait for buffer empty
 0176           ;       while( ! (status=SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 0176           L49:
 0176                   .dbline 113
 0176 10                push X
 0177 7C0000            xcall _SPIM_1_bReadStatus
 017A 20                pop X
 017B 2110              and A,16
 017D 5400              mov [X+0],A
 017F 3900              cmp A,0
 0181 AFF4              jz L48
 0183                   .dbline 115
 0183           ;     //dummy write
 0183           ;       SPIM_1_SendTxData(0x00);
 0183 10                push X
 0184 5000              mov A,0
 0186 7C0000            xcall _SPIM_1_SendTxData
 0189 20                pop X
 018A           L51:
 018A                   .dbline 117
 018A           ;       //wait for gabage byte read
 018A           ;       while( ! (status=SPIM_1_bReadStatus() & SPIM_1_SPIM_RX_BUFFER_FULL ) );
 018A           L52:
 018A                   .dbline 117
 018A 10                push X
 018B 7C0000            xcall _SPIM_1_bReadStatus
 018E 20                pop X
 018F 2108              and A,8
 0191 5400              mov [X+0],A
 0193 3900              cmp A,0
 0195 AFF4              jz L51
 0197                   .dbline 118
 0197           ;       SPIM_1_bReadRxData();
 0197 10                push X
 0198 7C0000            xcall _SPIM_1_bReadRxData
 019B 20                pop X
 019C                   .dbline 121
 019C           ;       
 019C           ;     
 019C           ;     for(n=0;(n<cnt);)
 019C 560100            mov [X+1],0
 019F 802E              xjmp L57
 01A1           L54:
 01A1                   .dbline 122
 01A1           ;       {
 01A1                   .dbline 124
 01A1           ;               //if buffer empty
 01A1           ;               status=SPIM_1_bReadStatus();
 01A1 10                push X
 01A2 7C0000            xcall _SPIM_1_bReadStatus
 01A5 20                pop X
 01A6 5400              mov [X+0],A
 01A8                   .dbline 125
 01A8           ;               if(  (status & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
 01A8 480010            tst [X+0],16
 01AB A001              jz L58
 01AD                   .dbline 125
 01AD           L58:
 01AD                   .dbline 126
 01AD           ;                       {
 01AD                   .dbline 128
 01AD           ;                   //dummy write
 01AD           ;                       SPIM_1_SendTxData(0x00);
 01AD 10                push X
 01AE 5000              mov A,0
 01B0 7C0000            xcall _SPIM_1_SendTxData
 01B3 20                pop X
 01B4                   .dbline 129
 01B4           ;                       }
 01B4                   .dbline 131
 01B4           ;               //if data               
 01B4           ;               if(  (status & SPIM_1_SPIM_RX_BUFFER_FULL ) );
 01B4 480008            tst [X+0],8
 01B7 A001              jz L60
 01B9                   .dbline 131
 01B9           L60:
 01B9                   .dbline 132
 01B9           ;               {
 01B9                   .dbline 133
 01B9           ;                       data[n]=SPIM_1_bReadRxData();
 01B9 10                push X
 01BA 7C0000            xcall _SPIM_1_bReadRxData
 01BD 20                pop X
 01BE 5300              mov [__r0],A
 01C0 5201              mov A,[X+1]
 01C2 5300              mov [__r3],A
 01C4 52FB              mov A,[X-5]
 01C6 0400              add [__r3],A
 01C8 5100              mov A,[__r0]
 01CA 3F00              mvi [__r3],A
 01CC                   .dbline 134
 01CC           ;                       n++;
 01CC 7701              inc [X+1]
 01CE                   .dbline 135
 01CE           ;               }
 01CE                   .dbline 136
 01CE           ;     };
 01CE           L55:
 01CE                   .dbline 121
 01CE           L57:
 01CE                   .dbline 121
 01CE 5201              mov A,[X+1]
 01D0 3BF9              cmp A,[X-7]
 01D2 CFCE              jc L54
 01D4           X2:
 01D4                   .dbline 136
 01D4                   .dbline 137
 01D4           ;       CS_HI();
 01D4 10                push X
 01D5 7C0000            xcall _CS_PIN_On
 01D8 20                pop X
 01D9                   .dbline -2
 01D9           L44:
 01D9 38FE              add SP,-2
 01DB 20                pop X
 01DC                   .dbline 0 ; func end
 01DC 7F                ret
 01DD                   .dbsym l n 1 c
 01DD                   .dbsym l status 0 c
 01DD                   .dbsym l cnt -7 c
 01DD                   .dbsym l data -6 pc
 01DD                   .dbsym l reg -4 c
 01DD                   .dbend
 01DD                   .dbfunc e CYRF_ReadRegisterInc _CYRF_ReadRegisterInc fV
 01DD           ;            cnt -> X-7
 01DD           ;           data -> X-6
 01DD           ;            reg -> X-4
 01DD           _CYRF_ReadRegisterInc::
 01DD                   .dbline -1
 01DD 10                push X
 01DE 4F                mov X,SP
 01DF                   .dbline 140
 01DF           ; }
 01DF           ; void CYRF_ReadRegisterInc(BYTE reg, BYTE data[], BYTE cnt)
 01DF           ; {
 01DF                   .dbline 141
 01DF           ;       CYRF_ReadRegisterMulti(reg|CYRF_INCR_BIT,data,cnt);
 01DF 52F9              mov A,[X-7]
 01E1 08                push A
 01E2 52FA              mov A,[X-6]
 01E4 08                push A
 01E5 52FB              mov A,[X-5]
 01E7 08                push A
 01E8 52FC              mov A,[X-4]
 01EA 2940              or A,64
 01EC 08                push A
 01ED 9F6B              xcall _CYRF_ReadRegisterMulti
 01EF 38FC              add SP,-4
 01F1                   .dbline -2
 01F1           L62:
 01F1 20                pop X
 01F2                   .dbline 0 ; func end
 01F2 7F                ret
 01F3                   .dbsym l cnt -7 c
 01F3                   .dbsym l data -6 pc
 01F3                   .dbsym l reg -4 c
 01F3                   .dbend
 01F3                   .dbfunc e CYRF_GetMfgData _CYRF_GetMfgData fV
 01F3           ;           data -> X-5
 01F3           _CYRF_GetMfgData::
 01F3                   .dbline -1
 01F3 10                push X
 01F4 4F                mov X,SP
 01F5                   .dbline 147
 01F5           ; }
 01F5           ; 
 01F5           ; 
 01F5           ; //get Mfg ID
 01F5           ; void CYRF_GetMfgData(BYTE data[])
 01F5           ; {
 01F5                   .dbline 149
 01F5           ;     /* Fuses power on */
 01F5           ;     CYRF_WriteRegister(CYRF_MFG_ID, 0xFF);
 01F5 50FF              mov A,-1
 01F7 08                push A
 01F8 5025              mov A,37
 01FA 08                push A
 01FB 9E56              xcall _CYRF_WriteRegister
 01FD 38FE              add SP,-2
 01FF                   .dbline 151
 01FF           ; 
 01FF           ;     CYRF_ReadRegisterMulti(CYRF_MFG_ID, data, 6);
 01FF 5006              mov A,6
 0201 08                push A
 0202 52FB              mov A,[X-5]
 0204 08                push A
 0205 52FC              mov A,[X-4]
 0207 08                push A
 0208 5025              mov A,37
 020A 08                push A
 020B 9F4D              xcall _CYRF_ReadRegisterMulti
 020D                   .dbline 154
 020D           ; 
 020D           ;     /* Fuses power off */
 020D           ;     CYRF_WriteRegister(CYRF_MFG_ID, 0x00); 
 020D 5000              mov A,0
 020F 08                push A
 0210 5025              mov A,37
 0212 08                push A
 0213 9E3E              xcall _CYRF_WriteRegister
 0215 38FA              add SP,-6
 0217                   .dbline -2
 0217           L63:
 0217 20                pop X
 0218                   .dbline 0 ; func end
 0218 7F                ret
 0219                   .dbsym l data -5 pc
 0219                   .dbend
 0219                   .dbfunc e CYRF_SetCRCSeed _CYRF_SetCRCSeed fV
 0219           ;            crc -> X-5
 0219           _CYRF_SetCRCSeed::
 0219                   .dbline -1
 0219 10                push X
 021A 4F                mov X,SP
 021B                   .dbline 158
 021B           ; }
 021B           ; 
 021B           ; void CYRF_SetCRCSeed(WORD crc)
 021B           ; {
 021B                   .dbline 159
 021B           ;     CYRF_WriteRegister(CYRF_CRC_SEED_LSB,crc & 0xff);
 021B 52FC              mov A,[X-4]
 021D 08                push A
 021E 5015              mov A,21
 0220 08                push A
 0221 9E30              xcall _CYRF_WriteRegister
 0223                   .dbline 160
 0223           ;     CYRF_WriteRegister(CYRF_CRC_SEED_MSB,crc >> 8);
 0223 52FB              mov A,[X-5]
 0225 08                push A
 0226 5016              mov A,22
 0228 08                push A
 0229 9E28              xcall _CYRF_WriteRegister
 022B 38FC              add SP,-4
 022D                   .dbline -2
 022D           L64:
 022D 20                pop X
 022E                   .dbline 0 ; func end
 022E 7F                ret
 022F                   .dbsym l crc -5 i
 022F                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\cyrf6936.c
 0000           _CY_irq::
 0000                   .blkb 1
 0001                   .dbsym e CY_irq _CY_irq c
