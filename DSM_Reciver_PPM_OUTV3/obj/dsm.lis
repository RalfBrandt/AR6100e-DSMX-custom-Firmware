                        .module dsm.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./dsm.c
                        .area lit(rom, con, rel, lit)
 0000           _pn_bind:
 0000 9888              .byte 152,136
 0002 1BE4              .byte 27,228
 0004 3079              .byte 48,'y
 0006 0384              .byte 3,132
 0008                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0008                   .dbsym s pn_bind _pn_bind A[8:8]kc
 0008           _pncodes:
 0008 03BC              .byte 3,188
 000A 6E8A              .byte 'n,138
 000C EFBD              .byte 239,189
 000E FEF8              .byte 254,248
 0010 8817              .byte 136,23
 0012 133B              .byte 19,59
 0014 2DBF              .byte 45,191
 0016 06D6              .byte 6,214
 0018 F194              .byte 241,148
 001A 3021              .byte 48,33
 001C A11C              .byte 161,28
 001E 88A9              .byte 136,169
 0020 D0D2              .byte 208,210
 0022 8EBC              .byte 142,188
 0024 822F              .byte 130,47
 0026 E3B4              .byte 227,180
 0028 8CFA              .byte 140,250
 002A 479B              .byte 'G,155
 002C 83A5              .byte 131,165
 002E 66D0              .byte 'f,208
 0030 07BD              .byte 7,189
 0032 9F26              .byte 159,38
 0034 C831              .byte 200,49
 0036 0FB8              .byte 15,184
 0038 EF03              .byte 239,3
 003A 9589              .byte 149,137
 003C B471              .byte 180,'q
 003E 619D              .byte 'a,157
 0040 40BA              .byte 64,186
 0042 97D5              .byte 151,213
 0044 864F              .byte 134,'O
 0046 CCD1              .byte 204,209
 0048 D7A1              .byte 215,161
 004A 54B1              .byte 'T,177
 004C 5E89              .byte 94,137
 004E AE86              .byte 174,134
 0050 83F7              .byte 131,247
 0052 A82D              .byte 168,45
 0054 7A44              .byte 'z,'D
 0056 64D3              .byte 'd,211
 0058 3F2C              .byte 63,44
 005A 4EAA              .byte 'N,170
 005C 7148              .byte 'q,'H
 005E 7AC9              .byte 'z,201
 0060 17FF              .byte 23,255
 0062 9E21              .byte 158,33
 0064 3690              .byte 54,144
 0066 C782              .byte 199,130
 0068 BC5D              .byte 188,93
 006A 9A5B              .byte 154,91
 006C EE7F              .byte 238,127
 006E 42EB              .byte 'B,235
 0070 24F5              .byte 36,245
 0072 DDF8              .byte 221,248
 0074 7A77              .byte 'z,'w
 0076 74E7              .byte 't,231
 0078 3D70              .byte 61,'p
 007A 7C94              .byte 124,148
 007C DC84              .byte 220,132
 007E AD95              .byte 173,149
 0080 1E6A              .byte 30,'j
 0082 F037              .byte 240,55
 0084 527B              .byte 'R,123
 0086 11D4              .byte 17,212
 0088 62F5              .byte 'b,245
 008A 2BAA              .byte 43,170
 008C FC33              .byte 252,51
 008E BFAF              .byte 191,175
 0090 4056              .byte 64,'V
 0092 32D9              .byte 50,217
 0094 0FD9              .byte 15,217
 0096 5D97              .byte 93,151
 0098 4056              .byte 64,'V
 009A 32D9              .byte 50,217
 009C 0FD9              .byte 15,217
 009E 5D97              .byte 93,151
 00A0 8E4A              .byte 142,'J
 00A2 D0A9              .byte 208,169
 00A4 A7FF              .byte 167,255
 00A6 20CA              .byte 32,202
 00A8 4C97              .byte 'L,151
 00AA 9DBF              .byte 157,191
 00AC B83D              .byte 184,61
 00AE B5BE              .byte 181,190
 00B0 0C5D              .byte 12,93
 00B2 2430              .byte 36,48
 00B4 9FCA              .byte 159,202
 00B6 6DBD              .byte 'm,189
 00B8 5014              .byte 'P,20
 00BA 33DE              .byte 51,222
 00BC F178              .byte 241,'x
 00BE 95AD              .byte 149,173
 00C0 0C3C              .byte 12,60
 00C2 FAF9              .byte 250,249
 00C4 F0F2              .byte 240,242
 00C6 10C9              .byte 16,201
 00C8 F4DA              .byte 244,218
 00CA 06DB              .byte 6,219
 00CC BF4E              .byte 191,'N
 00CE 6FB3              .byte 'o,179
 00D0 9E08              .byte 158,8
 00D2 D1AE              .byte 209,174
 00D4 595E              .byte 'Y,94
 00D6 E8F0              .byte 232,240
 00D8 C090              .byte 192,144
 00DA 8FBB              .byte 143,187
 00DC 7C8E              .byte 124,142
 00DE 2B8E              .byte 43,142
 00E0 C090              .byte 192,144
 00E2 8FBB              .byte 143,187
 00E4 7C8E              .byte 124,142
 00E6 2B8E              .byte 43,142
 00E8 8069              .byte 128,'i
 00EA 2680              .byte 38,128
 00EC 08F8              .byte 8,248
 00EE 49E7              .byte 'I,231
 00F0 7D2D              .byte 125,45
 00F2 4954              .byte 'I,'T
 00F4 D080              .byte 208,128
 00F6 40C1              .byte 64,193
 00F8 B6F2              .byte 182,242
 00FA E61B              .byte 230,27
 00FC 805A              .byte 128,'Z
 00FE 36B4              .byte 54,180
 0100 42AE              .byte 'B,174
 0102 9C1C              .byte 156,28
 0104 DA67              .byte 218,'g
 0106 05F6              .byte 5,246
 0108 9B75              .byte 155,'u
 010A F7E0              .byte 247,224
 010C 148D              .byte 20,141
 010E B580              .byte 181,128
 0110 BF54              .byte 191,'T
 0112 98B9              .byte 152,185
 0114 B730              .byte 183,48
 0116 5A88              .byte 'Z,136
 0118 35D1              .byte 53,209
 011A FC97              .byte 252,151
 011C 23D4              .byte 35,212
 011E C988              .byte 201,136
 0120 E1D6              .byte 225,214
 0122 3126              .byte 49,38
 0124 5FBD              .byte 95,189
 0126 4093              .byte 64,147
 0128 E1D6              .byte 225,214
 012A 3126              .byte 49,38
 012C 5FBD              .byte 95,189
 012E 4093              .byte 64,147
 0130 DC68              .byte 220,'h
 0132 0899              .byte 8,153
 0134 97AE              .byte 151,174
 0136 AF8C              .byte 175,140
 0138 C30E              .byte 195,14
 013A 0116              .byte 1,22
 013C 0E32              .byte 14,50
 013E 06BA              .byte 6,186
 0140 E083              .byte 224,131
 0142 01FA              .byte 1,250
 0144 AB3E              .byte 171,62
 0146 8FAC              .byte 143,172
 0148 5CD5              .byte 92,213
 014A 9CB8              .byte 156,184
 014C 469C              .byte 'F,156
 014E 7D84              .byte 125,132
 0150 F1C6              .byte 241,198
 0152 FE5C              .byte 254,92
 0154 9DA5              .byte 157,165
 0156 4FB7              .byte 'O,183
 0158 58B5              .byte 'X,181
 015A B3DD              .byte 179,221
 015C 0E28              .byte 14,40
 015E F1B0              .byte 241,176
 0160 5F30              .byte 95,48
 0162 3B56              .byte 59,'V
 0164 9645              .byte 150,'E
 0166 F4A1              .byte 244,161
 0168 03BC              .byte 3,188
 016A 6E8A              .byte 'n,138
 016C EFBD              .byte 239,189
 016E FEF8              .byte 254,248
 0170                   .dbsym s pncodes _pncodes A[360:5:9:8]kc
 0170           _init_vals:
 0170 2802              .byte 40,2
 0172 323C              .byte 50,60
 0174 3514              .byte 53,20
 0176 0D40              .byte 13,64
 0178 0648              .byte 6,'H
 017A 1B55              .byte 27,'U
 017C 1C05              .byte 28,5
 017E 0F24              .byte 15,36
 0180 120A              .byte 18,10
 0182 0F04              .byte 15,4
 0184 3901              .byte 57,1
 0186 0F24              .byte 15,36
 0188 2900              .byte 41,0
 018A 120A              .byte 18,10
 018C 104A              .byte 16,'J
 018E 290F              .byte 41,15
 0190                   .dbsym s init_vals _init_vals A[32:16:2]kc
 0190           _rcv_vals:
 0190 030F              .byte 3,15
 0192 10EE              .byte 16,238
 0194 1F00              .byte 31,0
 0196 1E00              .byte 30,0
 0198                   .dbsym s rcv_vals _rcv_vals A[8:4:2]kc
 0198           _preamble:
 0198 0433              .byte 4,51
 019A 33                .byte 51
 019B                   .dbsym s preamble _preamble A[3:3]kc
                        .area data(ram, con, rel)
 0000                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0000           _tx_cmd:
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0AC3              .byte 10,195
                        .area data(ram, con, rel)
 0002                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0002                   .dbsym s tx_cmd _tx_cmd A[2:2]c
                        .area text(rom, con, rel)
 0000                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0000                   .dbfunc e SetChannel _SetChannel fV
 0000           ;        CRCSeed -> X+2
 0000           ;         pn_row -> X+1
 0000           ;        channel -> X+0
 0000           _SetChannel::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 141
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "m8c.h"
 0004           ; #include "dsm.h"
 0004           ; #include "timer.h"
 0004           ; #include "ppm.h"
 0004           ; 
 0004           ; //#define DEBUG
 0004           ; 
 0004           ; //share memory with flash buffer
 0004           ; extern RAM_D mem;
 0004           ; #define tx_buf mem.b.buf0
 0004           ; //BYTE tx_buf[16];    //transmit buffer
 0004           ; #define rx_buf mem.b.buf1
 0004           ; //BYTE rx_buf[16];    //recive buffer
 0004           ; //BYTE rx_data[16]; //recived data
 0004           ; #define rx_data mem.rx_d 
 0004           ; 
 0004           ; 
 0004           ; //global data
 0004           ; BYTE channels[DSM_CH_CNT];    //list of channels
 0004           ; BYTE chidx;                   //current channel index 
 0004           ; BOOL Ch_A;                    //true for channel A false for channel B
 0004           ; BYTE sop_col;         
 0004           ; BYTE data_col;                
 0004           ; BYTE State;           
 0004           ; BYTE num_channels;    //number fo transmit channels
 0004           ; config_s config;
 0004           ; WORD DSM_Perriode;            //cycle time - 4000
 0004           ; BYTE lost_cnt;
 0004           ; BOOL New_RCV_Data;
 0004           ; volatile BOOL new_data;
 0004           ; volatile BOOL Rcv_Timeout;
 0004           ; 
 0004           ; //prototypes
 0004           ; void DSM_initialize_bind_ack(void);
 0004           ; void calc_dsmx_channel(void);
 0004           ; void DSM_StartBindAck(void);
 0004           ; void DSM_StartRcv(void);
 0004           ; void Bind_TimeOut_cb(void);
 0004           ; void Process_BindRcvIrq(void);
 0004           ; void ProcessNewData(void );
 0004           ; BYTE DSM_DeterminBitCount(void);
 0004           ; BOOL DSM_process_Data(void);
 0004           ; 
 0004           ; volatile WORD ppm_Data[PPM_PULSE_COUNT];      //the pulse len value for the chanales
 0004           ; 
 0004           ; 
 0004           ; static const BYTE pn_bind[] = {0x98, 0x88, 0x1B, 0xE4, 0x30, 0x79, 0x03, 0x84}; //used for sending bind response
 0004           ; 
 0004           ; static const BYTE pncodes[5][9][8] = {
 0004           ;     /* Note these are in order transmitted (LSB 1st) */
 0004           ; { /* Row 0 */
 0004           ;   /* Col 0 */ {0x03, 0xBC, 0x6E, 0x8A, 0xEF, 0xBD, 0xFE, 0xF8},
 0004           ;   /* Col 1 */ {0x88, 0x17, 0x13, 0x3B, 0x2D, 0xBF, 0x06, 0xD6},
 0004           ;   /* Col 2 */ {0xF1, 0x94, 0x30, 0x21, 0xA1, 0x1C, 0x88, 0xA9},
 0004           ;   /* Col 3 */ {0xD0, 0xD2, 0x8E, 0xBC, 0x82, 0x2F, 0xE3, 0xB4},
 0004           ;   /* Col 4 */ {0x8C, 0xFA, 0x47, 0x9B, 0x83, 0xA5, 0x66, 0xD0},
 0004           ;   /* Col 5 */ {0x07, 0xBD, 0x9F, 0x26, 0xC8, 0x31, 0x0F, 0xB8},
 0004           ;   /* Col 6 */ {0xEF, 0x03, 0x95, 0x89, 0xB4, 0x71, 0x61, 0x9D},
 0004           ;   /* Col 7 */ {0x40, 0xBA, 0x97, 0xD5, 0x86, 0x4F, 0xCC, 0xD1},
 0004           ;   /* Col 8 */ {0xD7, 0xA1, 0x54, 0xB1, 0x5E, 0x89, 0xAE, 0x86}
 0004           ; },
 0004           ; { /* Row 1 */
 0004           ;   /* Col 0 */ {0x83, 0xF7, 0xA8, 0x2D, 0x7A, 0x44, 0x64, 0xD3},
 0004           ;   /* Col 1 */ {0x3F, 0x2C, 0x4E, 0xAA, 0x71, 0x48, 0x7A, 0xC9},
 0004           ;   /* Col 2 */ {0x17, 0xFF, 0x9E, 0x21, 0x36, 0x90, 0xC7, 0x82},
 0004           ;   /* Col 3 */ {0xBC, 0x5D, 0x9A, 0x5B, 0xEE, 0x7F, 0x42, 0xEB},
 0004           ;   /* Col 4 */ {0x24, 0xF5, 0xDD, 0xF8, 0x7A, 0x77, 0x74, 0xE7},
 0004           ;   /* Col 5 */ {0x3D, 0x70, 0x7C, 0x94, 0xDC, 0x84, 0xAD, 0x95},
 0004           ;   /* Col 6 */ {0x1E, 0x6A, 0xF0, 0x37, 0x52, 0x7B, 0x11, 0xD4},
 0004           ;   /* Col 7 */ {0x62, 0xF5, 0x2B, 0xAA, 0xFC, 0x33, 0xBF, 0xAF},
 0004           ;   /* Col 8 */ {0x40, 0x56, 0x32, 0xD9, 0x0F, 0xD9, 0x5D, 0x97}
 0004           ; },
 0004           ; { /* Row 2 */
 0004           ;   /* Col 0 */ {0x40, 0x56, 0x32, 0xD9, 0x0F, 0xD9, 0x5D, 0x97},
 0004           ;   /* Col 1 */ {0x8E, 0x4A, 0xD0, 0xA9, 0xA7, 0xFF, 0x20, 0xCA},
 0004           ;   /* Col 2 */ {0x4C, 0x97, 0x9D, 0xBF, 0xB8, 0x3D, 0xB5, 0xBE},
 0004           ;   /* Col 3 */ {0x0C, 0x5D, 0x24, 0x30, 0x9F, 0xCA, 0x6D, 0xBD},
 0004           ;   /* Col 4 */ {0x50, 0x14, 0x33, 0xDE, 0xF1, 0x78, 0x95, 0xAD},
 0004           ;   /* Col 5 */ {0x0C, 0x3C, 0xFA, 0xF9, 0xF0, 0xF2, 0x10, 0xC9},
 0004           ;   /* Col 6 */ {0xF4, 0xDA, 0x06, 0xDB, 0xBF, 0x4E, 0x6F, 0xB3},
 0004           ;   /* Col 7 */ {0x9E, 0x08, 0xD1, 0xAE, 0x59, 0x5E, 0xE8, 0xF0},
 0004           ;   /* Col 8 */ {0xC0, 0x90, 0x8F, 0xBB, 0x7C, 0x8E, 0x2B, 0x8E}
 0004           ; },
 0004           ; { /* Row 3 */
 0004           ;   /* Col 0 */ {0xC0, 0x90, 0x8F, 0xBB, 0x7C, 0x8E, 0x2B, 0x8E},
 0004           ;   /* Col 1 */ {0x80, 0x69, 0x26, 0x80, 0x08, 0xF8, 0x49, 0xE7},
 0004           ;   /* Col 2 */ {0x7D, 0x2D, 0x49, 0x54, 0xD0, 0x80, 0x40, 0xC1},
 0004           ;   /* Col 3 */ {0xB6, 0xF2, 0xE6, 0x1B, 0x80, 0x5A, 0x36, 0xB4},
 0004           ;   /* Col 4 */ {0x42, 0xAE, 0x9C, 0x1C, 0xDA, 0x67, 0x05, 0xF6},
 0004           ;   /* Col 5 */ {0x9B, 0x75, 0xF7, 0xE0, 0x14, 0x8D, 0xB5, 0x80},
 0004           ;   /* Col 6 */ {0xBF, 0x54, 0x98, 0xB9, 0xB7, 0x30, 0x5A, 0x88},
 0004           ;   /* Col 7 */ {0x35, 0xD1, 0xFC, 0x97, 0x23, 0xD4, 0xC9, 0x88},
 0004           ;   /* Col 8 */ {0xE1, 0xD6, 0x31, 0x26, 0x5F, 0xBD, 0x40, 0x93}
 0004           ; },
 0004           ; { /* Row 4 */
 0004           ;   /* Col 0 */ {0xE1, 0xD6, 0x31, 0x26, 0x5F, 0xBD, 0x40, 0x93},
 0004           ;   /* Col 1 */ {0xDC, 0x68, 0x08, 0x99, 0x97, 0xAE, 0xAF, 0x8C},
 0004           ;   /* Col 2 */ {0xC3, 0x0E, 0x01, 0x16, 0x0E, 0x32, 0x06, 0xBA},
 0004           ;   /* Col 3 */ {0xE0, 0x83, 0x01, 0xFA, 0xAB, 0x3E, 0x8F, 0xAC},
 0004           ;   /* Col 4 */ {0x5C, 0xD5, 0x9C, 0xB8, 0x46, 0x9C, 0x7D, 0x84},
 0004           ;   /* Col 5 */ {0xF1, 0xC6, 0xFE, 0x5C, 0x9D, 0xA5, 0x4F, 0xB7},
 0004           ;   /* Col 6 */ {0x58, 0xB5, 0xB3, 0xDD, 0x0E, 0x28, 0xF1, 0xB0},
 0004           ;   /* Col 7 */ {0x5F, 0x30, 0x3B, 0x56, 0x96, 0x45, 0xF4, 0xA1},
 0004           ;   /* Col 8 */ {0x03, 0xBC, 0x6E, 0x8A, 0xEF, 0xBD, 0xFE, 0xF8}
 0004           ; },};
 0004           ; 
 0004           ; 
 0004           ; static const BYTE init_vals[][2] = {
 0004           ; //    {CYRF_MODE_OVERRIDE, 0x01},
 0004           ;     {CYRF_CLK_EN, CLK_EN_RXF},  //0x02
 0004           ;     {CYRF_AUTO_CAL_TIME, 0x3c}, //see cyrf manual
 0004           ;     {CYRF_AUTO_CAL_OFFSET, 0x14}, //see cyrf manual
 0004           ;       {CYRF_IO_CFG,IO_CFG_IRQ_POL}, //0x40 IRQ active High 
 0004           ;     {CYRF_RX_CFG, RX_LNA|FAST_TURN_EN}, //0x48 Fast Turn Mode Enable, Low Noise Amplifier ON
 0004           ;     {CYRF_TX_OFFSET_LSB, 0x55},//see cyrf manual
 0004           ;     {CYRF_TX_OFFSET_MSB, 0x05},//see cyrf manual
 0004           ;     {CYRF_XACT_CFG,CYRF_XACT_END_STATE(CYRF_MODE_IDLE)|CYRF_FRC_END}, //0x24 Force  Idle Mode
 0004           ;     {CYRF_DATA64_THOLD, 0x0a},//see cyrf manual
 0004           ;     {CYRF_XACT_CFG,CYRF_XACT_END_STATE(CYRF_MODE_IDLE)}, //0x04 Transaction End State Idle Mode
 0004           ;       {CYRF_ANALOG_CTRL, ALL_SLOW}, //0x01 all slow
 0004           ;     {CYRF_XACT_CFG,CYRF_XACT_END_STATE(CYRF_MODE_IDLE)| CYRF_FRC_END}, //0x24 Force IDLE
 0004           ;       {CYRF_RX_ABORT, 0x00}, //Clear RX abort
 0004           ;     {CYRF_DATA64_THOLD, 0x0a}, //set pn correlation threshold
 0004           ;     {CYRF_FRAMING_CFG, SOP_LEN|0xa}, //set sop len and threshold
 0004           ;     {CYRF_RX_ABORT, 0x0f}, //Clear RX abort?
 0004           ; };
 0004           ; 
 0004           ; 
 0004           ; static const BYTE rcv_vals[][2] = {
 0004           ;     {CYRF_TX_CFG,TX_DM(TX_DM_8DR)|DSM_BIND_POWER}, //0xD DDR Mode  32 chip codes
 0004           ;       {CYRF_FRAMING_CFG,LEN_EN|SOP_LEN|SOP_EN|0xE},  //0xEE SOP Enable SOP code length is 64 chips Packet Length Enable  SOP Correlator Threshold=0xE
 0004           ;     {CYRF_TX_OVERRIDE, 0x00},
 0004           ;     {CYRF_RX_OVERRIDE, 0x00},
 0004           ; };
 0004           ; 
 0004           ; static const BYTE preamble[]={0x04,0x33,0x33};
 0004           ; static  BYTE tx_cmd[]={0xA,TXE_IRQEN|TXC_IRQEN|TX_GO|TX_CLR}; //0xC3
 0004           ; 
 0004           ; void SetChannel(void)
 0004           ; {
 0004                   .dbline 142
 0004           ;       BYTE channel=channels[chidx];
 0004 5F000C            mov [__r1],[_chidx]
 0007 06000D            add [__r1],<_channels
 000A 3E00              mvi A,[__r1]
 000C 5400              mov [X+0],A
 000E                   .dbline 143
 000E           ;       BYTE pn_row = DSM_Is_DSMX ? (channel - 2)%5 : channel%5;
 000E 3C3600            cmp [_config+4],0
 0011 A027              jz L14
 0013 5200              mov A,[X+0]
 0015 5300              mov [__r1],A
 0017 550000            mov [__r0],0
 001A 160002            sub [__r1],2
 001D 1E0000            sbb [__r0],0
 0020 5000              mov A,0
 0022 08                push A
 0023 5005              mov A,5
 0025 08                push A
 0026 5100              mov A,[__r0]
 0028 08                push A
 0029 5100              mov A,[__r1]
 002B 08                push A
 002C 7C0000            xcall __divmod_16X16_16
 002F 38FE              add SP,-2
 0031 18                pop A
 0032 5405              mov [X+5],A
 0034 18                pop A
 0035 5404              mov [X+4],A
 0037 801C              xjmp L15
 0039           L14:
 0039 5200              mov A,[X+0]
 003B 5300              mov [__r1],A
 003D 5000              mov A,0
 003F 08                push A
 0040 5005              mov A,5
 0042 08                push A
 0043 5000              mov A,0
 0045 08                push A
 0046 5100              mov A,[__r1]
 0048 08                push A
 0049 7C0000            xcall __divmod_16X16_16
 004C 38FE              add SP,-2
 004E 18                pop A
 004F 5405              mov [X+5],A
 0051 18                pop A
 0052 5404              mov [X+4],A
 0054           L15:
 0054 5205              mov A,[X+5]
 0056 5401              mov [X+1],A
 0058                   .dbline 144
 0058           ;       WORD CRCSeed=Ch_A?~((WORD)(cyrfmfg_id[0] << 8) + (WORD)cyrfmfg_id[1]):((WORD)(cyrfmfg_id[0] << 8) + (WORD)cyrfmfg_id[1]);
 0058 3C0B00            cmp [_Ch_A],0
 005B A022              jz L19
 005D 5F0033            mov [__r1],[_config+1]
 0060 550000            mov [__r0],0
 0063 5F0032            mov [__r2],[_config]
 0066 5000              mov A,0
 0068 0200              add A,[__r1]
 006A 5300              mov [__r1],A
 006C 5100              mov A,[__r2]
 006E 0A00              adc A,[__r0]
 0070 5300              mov [__r0],A
 0072 5100              mov A,[__r1]
 0074 73                cpl A
 0075 5407              mov [X+7],A
 0077 5100              mov A,[__r0]
 0079 73                cpl A
 007A 5406              mov [X+6],A
 007C 8016              xjmp L20
 007E           L19:
 007E 5F0033            mov [__r1],[_config+1]
 0081 550000            mov [__r0],0
 0084 5F0032            mov [__r2],[_config]
 0087 5000              mov A,0
 0089 0200              add A,[__r1]
 008B 5407              mov [X+7],A
 008D 5100              mov A,[__r2]
 008F 0A00              adc A,[__r0]
 0091 5406              mov [X+6],A
 0093           L20:
 0093 5207              mov A,[X+7]
 0095 5403              mov [X+3],A
 0097 5206              mov A,[X+6]
 0099 5402              mov [X+2],A
 009B                   .dbline 145
 009B           ;       CYRF_SetRFChannel(channel);
 009B 5200              mov A,[X+0]
 009D 08                push A
 009E 5000              mov A,0
 00A0 08                push A
 00A1 7C0000            xcall _CYRF_WriteRegister
 00A4                   .dbline 146
 00A4           ;       CYRF_SetCRCSeed(CRCSeed);
 00A4 5202              mov A,[X+2]
 00A6 08                push A
 00A7 5203              mov A,[X+3]
 00A9 08                push A
 00AA 7C0000            xcall _CYRF_SetCRCSeed
 00AD 38FC              add SP,-4
 00AF                   .dbline 147
 00AF           ;     CYRF_SetSOPCode(pncodes[pn_row][sop_col]);
 00AF 5008              mov A,8
 00B1 08                push A
 00B2 5201              mov A,[X+1]
 00B4 5300              mov [__r1],A
 00B6 5000              mov A,0
 00B8 08                push A
 00B9 5100              mov A,[__r1]
 00BB 08                push A
 00BC 5000              mov A,0
 00BE 08                push A
 00BF 5048              mov A,72
 00C1 08                push A
 00C2 7C0000            xcall __mul16
 00C5 38FC              add SP,-4
 00C7 5F0000            mov [__r1],[__rX]
 00CA 5F0000            mov [__r0],[__rY]
 00CD 060008            add [__r1],<_pncodes
 00D0 0E0008            adc [__r0],>_pncodes
 00D3 5F000A            mov [__r3],[_sop_col]
 00D6 550000            mov [__r2],0
 00D9 6500              asl [__r3]
 00DB 6B00              rlc [__r2]
 00DD 6500              asl [__r3]
 00DF 6B00              rlc [__r2]
 00E1 6500              asl [__r3]
 00E3 6B00              rlc [__r2]
 00E5 5100              mov A,[__r3]
 00E7 0200              add A,[__r1]
 00E9 5300              mov [__r1],A
 00EB 5100              mov A,[__r2]
 00ED 0A00              adc A,[__r0]
 00EF 08                push A
 00F0 5100              mov A,[__r1]
 00F2 08                push A
 00F3 5022              mov A,34
 00F5 08                push A
 00F6 7C0000            xcall _CYRF_WriteRegisterMulti
 00F9 38FC              add SP,-4
 00FB                   .dbline 148
 00FB           ;     CYRF_SetDataCode(pncodes[pn_row][data_col], 16);
 00FB 5010              mov A,16
 00FD 08                push A
 00FE 5201              mov A,[X+1]
 0100 5300              mov [__r1],A
 0102 5000              mov A,0
 0104 08                push A
 0105 5100              mov A,[__r1]
 0107 08                push A
 0108 5000              mov A,0
 010A 08                push A
 010B 5048              mov A,72
 010D 08                push A
 010E 7C0000            xcall __mul16
 0111 38FC              add SP,-4
 0113 5F0000            mov [__r1],[__rX]
 0116 5F0000            mov [__r0],[__rY]
 0119 060008            add [__r1],<_pncodes
 011C 0E0008            adc [__r0],>_pncodes
 011F 5F0009            mov [__r3],[_data_col]
 0122 550000            mov [__r2],0
 0125 6500              asl [__r3]
 0127 6B00              rlc [__r2]
 0129 6500              asl [__r3]
 012B 6B00              rlc [__r2]
 012D 6500              asl [__r3]
 012F 6B00              rlc [__r2]
 0131 5100              mov A,[__r3]
 0133 0200              add A,[__r1]
 0135 5300              mov [__r1],A
 0137 5100              mov A,[__r2]
 0139 0A00              adc A,[__r0]
 013B 08                push A
 013C 5100              mov A,[__r1]
 013E 08                push A
 013F 5023              mov A,35
 0141 08                push A
 0142 7C0000            xcall _CYRF_WriteRegisterMulti
 0145 38FC              add SP,-4
 0147                   .dbline -2
 0147           L11:
 0147 38F8              add SP,-8
 0149 20                pop X
 014A                   .dbline 0 ; func end
 014A 7F                ret
 014B                   .dbsym l CRCSeed 2 i
 014B                   .dbsym l pn_row 1 c
 014B                   .dbsym l channel 0 c
 014B                   .dbend
 014B                   .dbfunc e SetCH_INC _SetCH_INC fV
 014B           _SetCH_INC::
 014B                   .dbline -1
 014B 10                push X
 014C 4F                mov X,SP
 014D 3804              add SP,4
 014F                   .dbline 153
 014F           ; }
 014F           ; 
 014F           ; //calculate and set channel CRC , SOP and data code 
 014F           ; void SetCH_INC(void)
 014F           ; {
 014F                   .dbline 154
 014F           ;       Ch_A=!Ch_A;     
 014F 3C0B00            cmp [_Ch_A],0
 0152 B009              jnz L23
 0154 560101            mov [X+1],1
 0157 560000            mov [X+0],0
 015A 8007              xjmp L24
 015C           L23:
 015C 560100            mov [X+1],0
 015F 560000            mov [X+0],0
 0162           L24:
 0162 5201              mov A,[X+1]
 0164 530B              mov [_Ch_A],A
 0166                   .dbline 158
 0166           ; #ifdef DEBUG
 0166           ;       LED_1_6_Switch(Ch_A?1:0);
 0166           ; #endif
 0166           ;     if(DSM_Is_DSMX)
 0166 3C3600            cmp [_config+4],0
 0169 A017              jz L25
 016B                   .dbline 159
 016B           ;         chidx = (chidx + 1) % 23;
 016B 510C              mov A,[_chidx]
 016D 0101              add A,1
 016F 5300              mov [__r0],A
 0171 5017              mov A,23
 0173 08                push A
 0174 5100              mov A,[__r0]
 0176 08                push A
 0177 7C0000            xcall __divmodu_8X8_8
 017A 38FF              add SP,-1
 017C 18                pop A
 017D 530C              mov [_chidx],A
 017F 8018              xjmp L26
 0181           L25:
 0181                   .dbline 161
 0181           ;     else
 0181           ;         chidx = Ch_A?0:1;
 0181 3C0B00            cmp [_Ch_A],0
 0184 A009              jz L29
 0186 560300            mov [X+3],0
 0189 560200            mov [X+2],0
 018C 8007              xjmp L30
 018E           L29:
 018E 560301            mov [X+3],1
 0191 560200            mov [X+2],0
 0194           L30:
 0194 5203              mov A,[X+3]
 0196 530C              mov [_chidx],A
 0198           L26:
 0198                   .dbline 162
 0198           ;       SetChannel();
 0198 9E66              xcall _SetChannel
 019A                   .dbline -2
 019A           L21:
 019A 38FC              add SP,-4
 019C 20                pop X
 019D                   .dbline 0 ; func end
 019D 7F                ret
 019E                   .dbend
 019E                   .dbfunc e DSM_Load_Config _DSM_Load_Config fV
 019E           ;              n -> X+0
 019E           ;            cnt -> X-6
 019E           ;           vals -> X-5
 019E           _DSM_Load_Config::
 019E                   .dbline -1
 019E 10                push X
 019F 4F                mov X,SP
 01A0 3801              add SP,1
 01A2                   .dbline 167
 01A2           ; }
 01A2           ; 
 01A2           ; //load the given config into cyfr6936
 01A2           ; void DSM_Load_Config(const BYTE vals[][2],BYTE cnt)
 01A2           ; {
 01A2                   .dbline 170
 01A2           ; BYTE n;
 01A2           ; 
 01A2           ; for(n=0;n<cnt;n++)
 01A2 560000            mov [X+0],0
 01A5 8033              xjmp L35
 01A7           L32:
 01A7                   .dbline 171
 01A7           ;       {
 01A7                   .dbline 172
 01A7           ;       CYRF_WriteRegister(vals[n][0],vals[n][1]);
 01A7 5200              mov A,[X+0]
 01A9 5300              mov [__r1],A
 01AB 550000            mov [__r0],0
 01AE 6500              asl [__r1]
 01B0 6B00              rlc [__r0]
 01B2 52FC              mov A,[X-4]
 01B4 0400              add [__r1],A
 01B6 52FB              mov A,[X-5]
 01B8 0C00              adc [__r0],A
 01BA 5100              mov A,[__r1]
 01BC 0101              add A,1
 01BE 5300              mov [__r3],A
 01C0 5100              mov A,[__r0]
 01C2 0900              adc A,0
 01C4 10                push X
 01C5 5800              mov X,[__r3]
 01C7 28                romx
 01C8 20                pop X
 01C9 08                push A
 01CA 5100              mov A,[__r0]
 01CC 10                push X
 01CD 5800              mov X,[__r1]
 01CF 28                romx
 01D0 20                pop X
 01D1 08                push A
 01D2 7C0000            xcall _CYRF_WriteRegister
 01D5 38FE              add SP,-2
 01D7                   .dbline 173
 01D7           ;       }
 01D7           L33:
 01D7                   .dbline 170
 01D7 7700              inc [X+0]
 01D9           L35:
 01D9                   .dbline 170
 01D9 5200              mov A,[X+0]
 01DB 3BFA              cmp A,[X-6]
 01DD CFC9              jc L32
 01DF           X0:
 01DF                   .dbline -2
 01DF           L31:
 01DF 38FF              add SP,-1
 01E1 20                pop X
 01E2                   .dbline 0 ; func end
 01E2 7F                ret
 01E3                   .dbsym l n 0 c
 01E3                   .dbsym l cnt -6 c
 01E3                   .dbsym l vals -5 pA[2:2]kc
 01E3                   .dbend
 01E3                   .dbfunc e DSM_ClearRxError _DSM_ClearRxError fV
 01E3           ;              i -> X+0
 01E3           _DSM_ClearRxError::
 01E3                   .dbline -1
 01E3 10                push X
 01E4 4F                mov X,SP
 01E5 3801              add SP,1
 01E7                   .dbline 179
 01E7           ; }
 01E7           ; 
 01E7           ; 
 01E7           ; //clear recive error and pending interupt flags
 01E7           ; void DSM_ClearRxError(void)
 01E7           ; {
 01E7                   .dbline 180
 01E7           ;       BYTE i=100;
 01E7 560064            mov [X+0],100
 01EA                   .dbline 181
 01EA           ;       CYRF_ReadRegister(CYRF_RX_IRQ_STATUS);
 01EA 5007              mov A,7
 01EC 08                push A
 01ED 7C0000            xcall _CYRF_ReadRegister
 01F0                   .dbline 182
 01F0           ;       CYRF_ReadRegister(CYRF_RX_IRQ_STATUS);
 01F0 5007              mov A,7
 01F2 08                push A
 01F3 7C0000            xcall _CYRF_ReadRegister
 01F6 38FE              add SP,-2
 01F8                   .dbline 183
 01F8           ;       CYRF_WriteRegister(CYRF_RX_ABORT,ABORT_EN); //abort
 01F8 5020              mov A,32
 01FA 08                push A
 01FB 5029              mov A,41
 01FD 08                push A
 01FE 7C0000            xcall _CYRF_WriteRegister
 0201                   .dbline 185
 0201           ;       //force end state
 0201           ;       CYRF_WriteRegister(CYRF_XACT_CFG,CYRF_XACT_END_STATE(CYRF_MODE_IDLE)|CYRF_FRC_END);
 0201 5024              mov A,36
 0203 08                push A
 0204 500F              mov A,15
 0206 08                push A
 0207 7C0000            xcall _CYRF_WriteRegister
 020A 38FC              add SP,-4
 020C 800A              xjmp L38
 020E           L37:
 020E                   .dbline 187
 020E           ;     while (! (CYRF_ReadRegister(CYRF_XACT_CFG) & CYRF_XACT_END_STATE(CYRF_MODE_IDLE))) 
 020E           ;       {
 020E                   .dbline 188
 020E           ;         if(!--i)
 020E 170001            sub [X+0],1
 0211 5200              mov A,[X+0]
 0213 B003              jnz L40
 0215                   .dbline 189
 0215           ;             break;
 0215 8010              xjmp L39
 0217           L40:
 0217                   .dbline 190
 0217           ;       }
 0217           L38:
 0217                   .dbline 186
 0217 500F              mov A,15
 0219 08                push A
 021A 7C0000            xcall _CYRF_ReadRegister
 021D 38FF              add SP,-1
 021F 5300              mov [__r0],A
 0221 470004            tst [__r0],4
 0224 AFE9              jz L37
 0226           L39:
 0226                   .dbline 192
 0226           ;       //clear abort
 0226           ;       CYRF_WriteRegister(CYRF_RX_ABORT,0);
 0226 5000              mov A,0
 0228 08                push A
 0229 5029              mov A,41
 022B 08                push A
 022C 7C0000            xcall _CYRF_WriteRegister
 022F 38FE              add SP,-2
 0231                   .dbline -2
 0231           L36:
 0231 38FF              add SP,-1
 0233 20                pop X
 0234                   .dbline 0 ; func end
 0234 7F                ret
 0235                   .dbsym l i 0 c
 0235                   .dbend
 0235                   .dbfunc e SYNC_AB_TimeOut_cb _SYNC_AB_TimeOut_cb fV
 0235           _SYNC_AB_TimeOut_cb::
 0235                   .dbline -1
 0235                   .dbline 195
 0235           ; }
 0235           ; void SYNC_AB_TimeOut_cb(void)
 0235           ; {
 0235                   .dbline 196
 0235           ;       DSM_ClearRxError();
 0235 9FAC              xcall _DSM_ClearRxError
 0237                   .dbline 200
 0237           ; #ifdef DEBUG
 0237           ;       LED_1_5_Invert();
 0237           ; #endif
 0237           ;       channels[chidx]++;
 0237 5F000C            mov [__r1],[_chidx]
 023A 06000D            add [__r1],<_channels
 023D 3E00              mvi A,[__r1]
 023F 7A00              dec [__r1]
 0241 0101              add A,1
 0243 3F00              mvi [__r1],A
 0245                   .dbline 201
 0245           ;       if(channels[chidx]>DSM_MAX_CH)
 0245 5F000C            mov [__r1],[_chidx]
 0248 06000D            add [__r1],<_channels
 024B 3E00              mvi A,[__r1]
 024D 5300              mov [__r0],A
 024F 504F              mov A,79
 0251 3A00              cmp A,[__r0]
 0253 D00B              jnc L43
 0255           X1:
 0255                   .dbline 202
 0255           ;               channels[chidx]=0;      
 0255 5F000C            mov [__r1],[_chidx]
 0258 06000D            add [__r1],<_channels
 025B 5000              mov A,0
 025D 3F00              mvi [__r1],A
 025F           L43:
 025F                   .dbline 203
 025F           ;       SetChannel();
 025F 9D9F              xcall _SetChannel
 0261                   .dbline 204
 0261           ;       DSM_StartRcv(); 
 0261 96F5              xcall _DSM_StartRcv
 0263                   .dbline -2
 0263           L42:
 0263                   .dbline 0 ; func end
 0263 7F                ret
 0264                   .dbend
                        .area data(ram, con, rel)
 0002                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0002           _cnt:
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0004                   .dbsym s cnt _cnt I
                        .area text(rom, con, rel)
 0264                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0264                   .dbfunc e SYNC_X_TimeOut_cb _SYNC_X_TimeOut_cb fV
 0264           _SYNC_X_TimeOut_cb::
 0264                   .dbline -1
 0264                   .dbline 209
 0264           ; }
 0264           ; 
 0264           ; static cnt=0;
 0264           ; void SYNC_X_TimeOut_cb(void)
 0264           ; {
 0264                   .dbline 210
 0264           ;       if (cnt==0)
 0264 3C0200            cmp [_cnt],0
 0267 B00C              jnz L46
 0269 3C0300            cmp [_cnt+1],0
 026C B007              jnz L46
 026E           X2:
 026E                   .dbline 212
 026E           ;       {
 026E           ;               DSM_ClearRxError();
 026E                   .dbline 212
 026E 9F73              xcall _DSM_ClearRxError
 0270                   .dbline 213
 0270           ;               SetCH_INC();
 0270 9ED9              xcall _SetCH_INC
 0272                   .dbline 214
 0272           ;               DSM_StartRcv(); 
 0272 96E4              xcall _DSM_StartRcv
 0274                   .dbline 215
 0274           ;       }
 0274           L46:
 0274                   .dbline 216
 0274           ;       Rcv_Timeout=TRUE;
 0274 554801            mov [_Rcv_Timeout],1
 0277                   .dbline 217
 0277           ;       cnt=(cnt+1)%4;
 0277 5103              mov A,[_cnt+1]
 0279 0101              add A,1
 027B 5300              mov [__r1],A
 027D 5102              mov A,[_cnt]
 027F 0900              adc A,0
 0281 5300              mov [__r0],A
 0283 5000              mov A,0
 0285 08                push A
 0286 5004              mov A,4
 0288 08                push A
 0289 5100              mov A,[__r0]
 028B 08                push A
 028C 5100              mov A,[__r1]
 028E 08                push A
 028F 7C0000            xcall __divmod_16X16_16
 0292 38FE              add SP,-2
 0294 18                pop A
 0295 5303              mov [_cnt+1],A
 0297 18                pop A
 0298 5302              mov [_cnt],A
 029A                   .dbline -2
 029A           L45:
 029A                   .dbline 0 ; func end
 029A 7F                ret
 029B                   .dbend
 029B                   .dbfunc e DSM_Set_SyncX_State _DSM_Set_SyncX_State fV
 029B           _DSM_Set_SyncX_State::
 029B                   .dbline -1
 029B                   .dbline 224
 029B           ; #ifdef DEBUG
 029B           ;       LED_1_5_Invert();
 029B           ; #endif
 029B           ; }
 029B           ; 
 029B           ; void DSM_Set_SyncX_State(void )
 029B           ; {
 029B                   .dbline 225
 029B           ;               State=DSM_STATE_SYNC_X;
 029B 554A0A            mov [_State],10
 029E                   .dbline 229
 029E           ; #ifdef DEBUG
 029E           ;               LED_1_7_Off();
 029E           ; #endif
 029E           ;               lost_cnt=0;
 029E 550700            mov [_lost_cnt],0
 02A1                   .dbline 230
 02A1           ;               Rcv_Timeout=FALSE;
 02A1 554800            mov [_Rcv_Timeout],0
 02A4                   .dbline 231
 02A4           ;               if (DSM_Is_DSMX)
 02A4 3C3600            cmp [_config+4],0
 02A7 A00A              jz L49
 02A9                   .dbline 232
 02A9           ;                       Timer_SetPeriod(DSM_FULL_SEQUENCE_TIME);
 02A9 10                push X
 02AA 5055              mov A,85
 02AC 7C0000            xcall _Timer8_1_WritePeriod
 02AF 20                pop X
 02B0 8008              xjmp L50
 02B2           L49:
 02B2                   .dbline 234
 02B2           ;               else
 02B2           ;                       Timer_SetPeriod(DSM_SCAN_TIME+DSM_TIME_EXTRA);
 02B2 10                push X
 02B3 5056              mov A,86
 02B5 7C0000            xcall _Timer8_1_WritePeriod
 02B8 20                pop X
 02B9           L50:
 02B9                   .dbline 235
 02B9           ;               Timer_SetCallback(SYNC_X_TimeOut_cb);
 02B9 500A              mov A,>PL_SYNC_X_TimeOut_cb
 02BB 08                push A
 02BC 500A              mov A,<PL_SYNC_X_TimeOut_cb
 02BE 08                push A
 02BF 7C0000            xcall _Timer_SetCallback
 02C2 38FE              add SP,-2
 02C4                   .dbline -2
 02C4           L48:
 02C4                   .dbline 0 ; func end
 02C4 7F                ret
 02C5                   .dbend
 02C5                   .dbfunc e Rcv_X_TimeOut_cb _Rcv_X_TimeOut_cb fV
 02C5           _Rcv_X_TimeOut_cb::
 02C5                   .dbline -1
 02C5                   .dbline 239
 02C5           ; }
 02C5           ; 
 02C5           ; void Rcv_X_TimeOut_cb(void)
 02C5           ; {
 02C5                   .dbline 240
 02C5           ;       Timer_Stop();
 02C5 10                push X
 02C6 7C0000            xcall _Timer8_1_Stop
 02C9 20                pop X
 02CA                   .dbline 241
 02CA           ;       if(Ch_A)
 02CA 3C0B00            cmp [_Ch_A],0
 02CD A00A              jz L53
 02CF                   .dbline 243
 02CF           ;               {
 02CF           ;               Timer_SetPeriod(DSM_TIME_CHA_CHB);
 02CF                   .dbline 243
 02CF 10                push X
 02D0 500F              mov A,15
 02D2 7C0000            xcall _Timer8_1_WritePeriod
 02D5 20                pop X
 02D6                   .dbline 244
 02D6           ;               }
 02D6 800B              xjmp L54
 02D8           L53:
 02D8                   .dbline 246
 02D8           ;       else
 02D8           ;               {
 02D8                   .dbline 247
 02D8           ;               Timer_SetPeriod(DSM_Perriode);
 02D8 5F004C            mov [__r0],[_DSM_Perriode+1]
 02DB 10                push X
 02DC 5100              mov A,[__r0]
 02DE 7C0000            xcall _Timer8_1_WritePeriod
 02E1 20                pop X
 02E2                   .dbline 248
 02E2           ;               }
 02E2           L54:
 02E2                   .dbline 250
 02E2           ;               
 02E2           ;       if(lost_cnt++>DSM_CH_CNT/2 && !Ch_A)
 02E2 5F0007            mov [__r1],[_lost_cnt]
 02E5 550000            mov [__r0],0
 02E8 5100              mov A,[__r1]
 02EA 0101              add A,1
 02EC 5307              mov [_lost_cnt],A
 02EE 500B              mov A,11
 02F0 1200              sub A,[__r1]
 02F2 5000              mov A,0
 02F4 3180              xor A,-128
 02F6 5300              mov [__rX],A
 02F8 5080              mov A,(0 ^ 0x80)
 02FA 1A00              sbb A,[__rX]
 02FC D008              jnc L55
 02FE           X3:
 02FE 3C0B00            cmp [_Ch_A],0
 0301 B003              jnz L55
 0303                   .dbline 252
 0303           ;               {
 0303           ;               DSM_Set_SyncX_State();
 0303                   .dbline 252
 0303 9F96              xcall _DSM_Set_SyncX_State
 0305                   .dbline 253
 0305           ;               }
 0305           L55:
 0305                   .dbline 254
 0305           ;       Timer_Start();
 0305 10                push X
 0306 7C0000            xcall _Timer8_1_Start
 0309 20                pop X
 030A                   .dbline 255
 030A           ;       DSM_ClearRxError();
 030A 9ED7              xcall _DSM_ClearRxError
 030C                   .dbline 256
 030C           ;       SetCH_INC();
 030C 9E3D              xcall _SetCH_INC
 030E                   .dbline 257
 030E           ;       DSM_StartRcv(); 
 030E 9648              xcall _DSM_StartRcv
 0310                   .dbline 258
 0310           ;       New_RCV_Data=TRUE;
 0310 550601            mov [_New_RCV_Data],1
 0313                   .dbline -2
 0313           L52:
 0313                   .dbline 0 ; func end
 0313 7F                ret
 0314                   .dbend
 0314                   .dbfunc e DSM_initialize_Recive _DSM_initialize_Recive fV
 0314           _DSM_initialize_Recive::
 0314                   .dbline -1
 0314 10                push X
 0315 4F                mov X,SP
 0316 3802              add SP,2
 0318                   .dbline 265
 0318           ; #ifdef DEBUG
 0318           ;       LED_1_5_Invert();
 0318           ; #endif
 0318           ; }
 0318           ; 
 0318           ; void DSM_initialize_Recive(void)
 0318           ; {
 0318                   .dbline 266
 0318           ;       chidx=0;
 0318 550C00            mov [_chidx],0
 031B                   .dbline 267
 031B           ;       Ch_A=TRUE;
 031B 550B01            mov [_Ch_A],1
 031E                   .dbline 268
 031E           ;       Rcv_Timeout=FALSE;
 031E 554800            mov [_Rcv_Timeout],0
 0321                   .dbline 269
 0321           ;       New_RCV_Data=FALSE;
 0321 550600            mov [_New_RCV_Data],0
 0324                   .dbline 270
 0324           ;       lost_cnt=0;
 0324 550700            mov [_lost_cnt],0
 0327                   .dbline 271
 0327           ;       sop_col = (cyrfmfg_id[0] + cyrfmfg_id[1] + cyrfmfg_id[2] + 2) & 0x07;
 0327 5132              mov A,[_config]
 0329 0233              add A,[_config+1]
 032B 5300              mov [__r0],A
 032D 5134              mov A,[_config+2]
 032F 0400              add [__r0],A
 0331 060002            add [__r0],2
 0334 5100              mov A,[__r0]
 0336 2107              and A,7
 0338 530A              mov [_sop_col],A
 033A                   .dbline 272
 033A           ;     data_col = 7 - sop_col;
 033A 5007              mov A,7
 033C 120A              sub A,[_sop_col]
 033E 5309              mov [_data_col],A
 0340                   .dbline 273
 0340           ;       DSM_Load_Config(rcv_vals,sizeof(rcv_vals)/(sizeof(BYTE)*2));
 0340 5004              mov A,4
 0342 08                push A
 0343 5090              mov A,>_rcv_vals
 0345 08                push A
 0346 5090              mov A,<_rcv_vals
 0348 08                push A
 0349 9E53              xcall _DSM_Load_Config
 034B 38FD              add SP,-3
 034D                   .dbline 274
 034D           ;       if(DSM_Is_DSMX)
 034D 3C3600            cmp [_config+4],0
 0350 A008              jz L60
 0352                   .dbline 276
 0352           ;               {
 0352           ;               calc_dsmx_channel();    
 0352                   .dbline 276
 0352 9274              xcall _calc_dsmx_channel
 0354                   .dbline 277
 0354           ;               State=DSM_STATE_SYNC_X;
 0354 554A0A            mov [_State],10
 0357                   .dbline 278
 0357           ;               }
 0357 800A              xjmp L61
 0359           L60:
 0359                   .dbline 280
 0359           ;       else
 0359           ;               {
 0359                   .dbline 281
 0359           ;               channels[0]=channels[1]=1;      
 0359 550E01            mov [_channels+1],1
 035C 550D01            mov [_channels],1
 035F                   .dbline 282
 035F           ;               State=DSM_STATE_SYNC_AB;
 035F 554A06            mov [_State],6
 0362                   .dbline 283
 0362           ;               }       
 0362           L61:
 0362                   .dbline 285
 0362           ;       //set periode to be 11ms or 22ms        
 0362           ;       DSM_Perriode=DSM_Is_11ms?DSM_TIME11MS:DSM_TIME22MS;
 0362 3C3700            cmp [_config+5],0
 0365 A009              jz L66
 0367 56011B            mov [X+1],27
 036A 560000            mov [X+0],0
 036D 8007              xjmp L67
 036F           L66:
 036F 560146            mov [X+1],70
 0372 560000            mov [X+0],0
 0375           L67:
 0375 5201              mov A,[X+1]
 0377 534C              mov [_DSM_Perriode+1],A
 0379 5200              mov A,[X+0]
 037B 534B              mov [_DSM_Perriode],A
 037D                   .dbline 288
 037D           ; 
 037D           ;       //calculate channel CRC SOP and data code for first channel to transmitt
 037D           ;       Timer_Stop();
 037D 10                push X
 037E 7C0000            xcall _Timer8_1_Stop
 0381 20                pop X
 0382                   .dbline 289
 0382           ;       if(DSM_Is_DSMX)
 0382 3C3600            cmp [_config+4],0
 0385 A015              jz L68
 0387                   .dbline 291
 0387           ;               {       
 0387           ;                       Timer_SetPeriod(DSM_FULL_SEQUENCE_TIME);
 0387                   .dbline 291
 0387 10                push X
 0388 5055              mov A,85
 038A 7C0000            xcall _Timer8_1_WritePeriod
 038D 20                pop X
 038E                   .dbline 292
 038E           ;                       Timer_SetCallback(SYNC_X_TimeOut_cb);
 038E 500A              mov A,>PL_SYNC_X_TimeOut_cb
 0390 08                push A
 0391 500A              mov A,<PL_SYNC_X_TimeOut_cb
 0393 08                push A
 0394 7C0000            xcall _Timer_SetCallback
 0397 38FE              add SP,-2
 0399                   .dbline 293
 0399           ;               }
 0399 8013              xjmp L69
 039B           L68:
 039B                   .dbline 295
 039B           ;       else 
 039B           ;               {
 039B                   .dbline 296
 039B           ;                       Timer_SetPeriod(DSM_SCAN_TIME+DSM_TIME_EXTRA);
 039B 10                push X
 039C 5056              mov A,86
 039E 7C0000            xcall _Timer8_1_WritePeriod
 03A1 20                pop X
 03A2                   .dbline 297
 03A2           ;                       Timer_SetCallback(SYNC_AB_TimeOut_cb);
 03A2 5008              mov A,>PL_SYNC_AB_TimeOut_cb
 03A4 08                push A
 03A5 5008              mov A,<PL_SYNC_AB_TimeOut_cb
 03A7 08                push A
 03A8 7C0000            xcall _Timer_SetCallback
 03AB 38FE              add SP,-2
 03AD                   .dbline 298
 03AD           ;               }
 03AD           L69:
 03AD                   .dbline 299
 03AD           ;       SetChannel();
 03AD 9C51              xcall _SetChannel
 03AF                   .dbline 300
 03AF           ;       Timer_Start();
 03AF 10                push X
 03B0 7C0000            xcall _Timer8_1_Start
 03B3 20                pop X
 03B4                   .dbline 301
 03B4           ;       DSM_StartRcv(); 
 03B4 95A2              xcall _DSM_StartRcv
 03B6                   .dbline -2
 03B6           L57:
 03B6 38FE              add SP,-2
 03B8 20                pop X
 03B9                   .dbline 0 ; func end
 03B9 7F                ret
 03BA                   .dbend
 03BA                   .dbfunc e Process_Rvc_Irq _Process_Rvc_Irq fV
 03BA           ;              n -> X+0
 03BA           _Process_Rvc_Irq::
 03BA                   .dbline -1
 03BA 10                push X
 03BB 4F                mov X,SP
 03BC 3801              add SP,1
 03BE                   .dbline 305
 03BE           ; }
 03BE           ; 
 03BE           ; void Process_Rvc_Irq(void)
 03BE           ; {
 03BE                   .dbline 307
 03BE           ;       BYTE n;
 03BE           ;       if ((( DSM_Is_DSMX) && (rx_buf[0] !=  cyrfmfg_id[2] || rx_buf[1] !=  cyrfmfg_id[3]))
 03BE 3C3600            cmp [_config+4],0
 03C1 A00D              jz L87
 03C3 5110              mov A,[_mem+16]
 03C5 3A34              cmp A,[_config+2]
 03C7 B022              jnz L88
 03C9 5111              mov A,[_mem+16+1]
 03CB 3A35              cmp A,[_config+3]
 03CD B01C              jnz L88
 03CF           L87:
 03CF 3C3600            cmp [_config+4],0
 03D2 B019              jnz L72
 03D4 5134              mov A,[_config+2]
 03D6 73                cpl A
 03D7 5300              mov [__r0],A
 03D9 5110              mov A,[_mem+16]
 03DB 3A00              cmp A,[__r0]
 03DD B00C              jnz L88
 03DF 5135              mov A,[_config+3]
 03E1 73                cpl A
 03E2 5300              mov [__r0],A
 03E4 5111              mov A,[_mem+16+1]
 03E6 3A00              cmp A,[__r0]
 03E8 A003              jz L72
 03EA           L88:
 03EA                   .dbline 310
 03EA           ;         ||((!DSM_Is_DSMX) && (rx_buf[0] != ~cyrfmfg_id[2] || rx_buf[1] != ~cyrfmfg_id[3]))) 
 03EA           ;       {
 03EA           ;               goto Rvc_Error;
 03EA                   .dbline 310
 03EA 8077              xjmp L89
 03EC           L72:
 03EC                   .dbline 315
 03EC           ;       }
 03EC           ; #ifdef DEBUG
 03EC           ;       LED_1_4_Invert();
 03EC           ; #endif
 03EC           ;       Timer_Stop();
 03EC 10                push X
 03ED 7C0000            xcall _Timer8_1_Stop
 03F0 20                pop X
 03F1                   .dbline 316
 03F1           ;       if(Ch_A)
 03F1 3C0B00            cmp [_Ch_A],0
 03F4 A00A              jz L90
 03F6                   .dbline 318
 03F6           ;               {
 03F6           ;               Timer_SetPeriod(DSM_TIME_CHA_CHB+DSM_TIME_EXTRA);
 03F6                   .dbline 318
 03F6 10                push X
 03F7 5010              mov A,16
 03F9 7C0000            xcall _Timer8_1_WritePeriod
 03FC 20                pop X
 03FD                   .dbline 319
 03FD           ;               }
 03FD 800A              xjmp L91
 03FF           L90:
 03FF                   .dbline 321
 03FF           ;       else
 03FF           ;               {
 03FF                   .dbline 322
 03FF           ;               Timer_SetPeriod(DSM_Perriode+DSM_TIME_EXTRA);
 03FF 514C              mov A,[_DSM_Perriode+1]
 0401 0101              add A,1
 0403 10                push X
 0404 7C0000            xcall _Timer8_1_WritePeriod
 0407 20                pop X
 0408                   .dbline 323
 0408           ;               }
 0408           L91:
 0408                   .dbline 325
 0408           ; 
 0408           ;       if (State==DSM_STATE_SYNC_AB)
 0408 3C4A06            cmp [_State],6
 040B B016              jnz L92
 040D                   .dbline 327
 040D           ;       {
 040D           ;               if (chidx==1  && channels[0]!=channels[1])
 040D                   .dbline 327
 040D 3C0C01            cmp [_chidx],1
 0410 B00A              jnz L94
 0412 510D              mov A,[_channels]
 0414 3A0E              cmp A,[_channels+1]
 0416 A004              jz L94
 0418                   .dbline 329
 0418           ;               {
 0418           ;                       State =DSM_STATE_SYNC_X;
 0418                   .dbline 329
 0418 554A0A            mov [_State],10
 041B                   .dbline 330
 041B           ;               }
 041B           L94:
 041B                   .dbline 331
 041B           ;       Timer_SetPeriod(DSM_SCAN_TIME+DSM_TIME_EXTRA);  
 041B 10                push X
 041C 5056              mov A,86
 041E 7C0000            xcall _Timer8_1_WritePeriod
 0421 20                pop X
 0422                   .dbline 332
 0422           ;       }
 0422           L92:
 0422                   .dbline 334
 0422           ; 
 0422           ;       Timer_Start();
 0422 10                push X
 0423 7C0000            xcall _Timer8_1_Start
 0426 20                pop X
 0427                   .dbline 336
 0427           ; 
 0427           ;       if (DSM_STATE_SYNC_X==State)
 0427 3C4A0A            cmp [_State],10
 042A B00F              jnz L97
 042C                   .dbline 338
 042C           ;       {
 042C           ;               State=DSM_STATE_LOCKED;
 042C                   .dbline 338
 042C 554A0B            mov [_State],11
 042F                   .dbline 342
 042F           ; #ifdef DEBUG
 042F           ;               LED_1_7_On(); 
 042F           ; #endif
 042F           ;               Timer_SetCallback(Rcv_X_TimeOut_cb);
 042F 5006              mov A,>PL_Rcv_X_TimeOut_cb
 0431 08                push A
 0432 5006              mov A,<PL_Rcv_X_TimeOut_cb
 0434 08                push A
 0435 7C0000            xcall _Timer_SetCallback
 0438 38FE              add SP,-2
 043A                   .dbline 343
 043A           ;       }
 043A           L97:
 043A                   .dbline 345
 043A           ; 
 043A           ;       SetCH_INC();
 043A 9D0F              xcall _SetCH_INC
 043C                   .dbline 348
 043C           ;               
 043C           ;       //process data
 043C           ;       for (n=2;n<0x10;n++)
 043C 560002            mov [X+0],2
 043F 8017              xjmp L102
 0441           L99:
 0441                   .dbline 349
 0441           ;               rx_data[n]=rx_buf[n];
 0441 5200              mov A,[X+0]
 0443 0110              add A,<_mem+16
 0445 5300              mov [__r1],A
 0447 3E00              mvi A,[__r1]
 0449 5300              mov [__r0],A
 044B 5200              mov A,[X+0]
 044D 0100              add A,<_mem
 044F 5300              mov [__r3],A
 0451 5100              mov A,[__r0]
 0453 3F00              mvi [__r3],A
 0455           L100:
 0455                   .dbline 348
 0455 7700              inc [X+0]
 0457           L102:
 0457                   .dbline 348
 0457 3D0010            cmp [X+0],16
 045A CFE6              jc L99
 045C           X4:
 045C                   .dbline 352
 045C           ;       //rx_data[0]=DSM_Is_DSMX?(DSM_Is_11ms?0xB2:0xA2):DSM_Is_11Bit?(DSM_Is_11ms?0x12:0x11):(DSM_Is_11ms?0x02:0x01);
 045C           ;       //rx_data[1]=0;
 045C           ;       New_RCV_Data=TRUE;
 045C 550601            mov [_New_RCV_Data],1
 045F                   .dbline 353
 045F           ;       lost_cnt=0;
 045F 550700            mov [_lost_cnt],0
 0462           L89:
 0462                   .dbline 356
 0462           ;       
 0462           ; Rvc_Error:
 0462           ;       DSM_StartRcv();
 0462 94F4              xcall _DSM_StartRcv
 0464                   .dbline -2
 0464           L71:
 0464 38FF              add SP,-1
 0466 20                pop X
 0467                   .dbline 0 ; func end
 0467 7F                ret
 0468                   .dbsym l n 0 c
 0468                   .dbend
 0468                   .dbfunc e ProcessRxIrqStatus _ProcessRxIrqStatus fc
 0468           ;            Est -> X+2
 0468           ;         rx_cnt -> X+2
 0468           ;     Irq_Status -> X+0
 0468           _ProcessRxIrqStatus::
 0468                   .dbline -1
 0468 10                push X
 0469 4F                mov X,SP
 046A 3803              add SP,3
 046C                   .dbline 362
 046C           ; }
 046C           ; 
 046C           ; 
 046C           ;       
 046C           ; BOOL ProcessRxIrqStatus(void)
 046C           ; {
 046C                   .dbline 365
 046C           ;               BYTE Irq_Status[2];
 046C           ;               //read IRQ status
 046C           ;               CYRF_ReadRegisterMulti(CYRF_RX_IRQ_STATUS,Irq_Status,2);
 046C 5002              mov A,2
 046E 08                push A
 046F 5100              mov A,[__r0]
 0471 08                push A
 0472 10                push X
 0473 5007              mov A,7
 0475 08                push A
 0476 7C0000            xcall _CYRF_ReadRegisterMulti
 0479 38FC              add SP,-4
 047B                   .dbline 366
 047B           ;               Irq_Status[0]|=Irq_Status[1]&RXE_IRQ;
 047B 5201              mov A,[X+1]
 047D 2101              and A,1
 047F 2D00              or [X+0],A
 0481                   .dbline 367
 0481           ;               if(Irq_Status[0]&RXC_IRQ)
 0481 480002            tst [X+0],2
 0484 A023              jz L106
 0486                   .dbline 369
 0486           ;               {
 0486           ;                       BYTE rx_cnt=CYRF_Rx_cnt();
 0486                   .dbline 369
 0486 5009              mov A,9
 0488 08                push A
 0489 7C0000            xcall _CYRF_ReadRegister
 048C 5402              mov [X+2],A
 048E                   .dbline 370
 048E           ;                       CYRF_ReadRx_data(rx_buf,rx_cnt);
 048E 5202              mov A,[X+2]
 0490 08                push A
 0491 5010              mov A,>_mem+16
 0493 08                push A
 0494 5010              mov A,<_mem+16
 0496 08                push A
 0497 5021              mov A,33
 0499 08                push A
 049A 7C0000            xcall _CYRF_ReadRegisterMulti
 049D 38FB              add SP,-5
 049F                   .dbline 371
 049F           ;                       if(rx_cnt!=0x10)
 049F 3D0210            cmp [X+2],16
 04A2 A005              jz L109
 04A4                   .dbline 373
 04A4           ;                       {
 04A4           ;                               return FALSE;
 04A4                   .dbline 373
 04A4 5000              mov A,0
 04A6 8016              xjmp L104
 04A8           L109:
 04A8                   .dbline 375
 04A8           ;                       }
 04A8           ;               }
 04A8           L106:
 04A8                   .dbline 376
 04A8           ;               if (Irq_Status[0]&RXE_IRQ)
 04A8 480001            tst [X+0],1
 04AB A00F              jz L111
 04AD                   .dbline 378
 04AD           ;               {
 04AD           ;                       BYTE Est=CYRF_ReadRegister(CYRF_RX_STATUS);
 04AD                   .dbline 378
 04AD 5008              mov A,8
 04AF 08                push A
 04B0 7C0000            xcall _CYRF_ReadRegister
 04B3 38FF              add SP,-1
 04B5 5402              mov [X+2],A
 04B7                   .dbline 379
 04B7           ;                       return FALSE;
 04B7 5000              mov A,0
 04B9 8003              xjmp L104
 04BB           L111:
 04BB                   .dbline 381
 04BB           ;               }
 04BB           ; return TRUE;
 04BB 5001              mov A,1
 04BD                   .dbline -2
 04BD           L104:
 04BD 38FD              add SP,-3
 04BF 20                pop X
 04C0                   .dbline 0 ; func end
 04C0 7F                ret
 04C1                   .dbsym l Est 2 c
 04C1                   .dbsym l rx_cnt 2 c
 04C1                   .dbsym l Irq_Status 0 A[2:2]c
 04C1                   .dbend
 04C1                   .dbfunc e ProcessNewData _ProcessNewData fV
 04C1           _ProcessNewData::
 04C1                   .dbline -1
 04C1                   .dbline 385
 04C1           ; }
 04C1           ; 
 04C1           ; void ProcessNewData(void )
 04C1           ; {
 04C1                   .dbline 386
 04C1           ;               new_data= DSM_process_Data();
 04C1 96DB              xcall _DSM_process_Data
 04C3 5349              mov [_new_data],A
 04C5                   .dbline -2
 04C5           L113:
 04C5                   .dbline 0 ; func end
 04C5 7F                ret
 04C6                   .dbend
 04C6                   .dbfunc e DSM_Cyclic _DSM_Cyclic fV
 04C6           ;     Irq_Status -> X+2
 04C6           _DSM_Cyclic::
 04C6                   .dbline -1
 04C6 10                push X
 04C7 4F                mov X,SP
 04C8 3806              add SP,6
 04CA                   .dbline 391
 04CA           ; }
 04CA           ; 
 04CA           ; 
 04CA           ; void DSM_Cyclic(void)
 04CA           ; {
 04CA                   .dbline 392
 04CA           ;       switch(State)
 04CA 514A              mov A,[_State]
 04CC 5401              mov [X+1],A
 04CE 560000            mov [X+0],0
 04D1 3D0000            cmp [X+0],0
 04D4 B006              jnz X5
 04D6 3D0100            cmp [X+1],0
 04D9 A017              jz L118
 04DB           X5:
 04DB 3D0000            cmp [X+0],0
 04DE B006              jnz X6
 04E0 3D0103            cmp [X+1],3
 04E3 A01A              jz L120
 04E5           X6:
 04E5 3D0000            cmp [X+0],0
 04E8 B006              jnz X7
 04EA 3D0105            cmp [X+1],5
 04ED A00C              jz L119
 04EF           X7:
 04EF 8012              xjmp L115
 04F1           L118:
 04F1                   .dbline 395
 04F1           ;       {
 04F1           ;               case DSM_STATE_BIND:
 04F1           ;                       {
 04F1                   .dbline 396
 04F1           ;                       DSM_ClearRxError();
 04F1 9CF0              xcall _DSM_ClearRxError
 04F3                   .dbline 397
 04F3           ;                       DSM_StartRcv();
 04F3 9463              xcall _DSM_StartRcv
 04F5                   .dbline 398
 04F5           ;                       State=DSM_STATE_BIND_RCV;
 04F5 554A01            mov [_State],1
 04F8                   .dbline 399
 04F8           ;                       }
 04F8                   .dbline 400
 04F8           ;               break;
 04F8 8009              xjmp L116
 04FA           L119:
 04FA                   .dbline 402
 04FA           ;               case DSM_STATE_BIND_DONE:
 04FA           ;                       {
 04FA                   .dbline 403
 04FA           ;                               DSM_initialize_Recive();
 04FA 9E18              xcall _DSM_initialize_Recive
 04FC                   .dbline 404
 04FC           ;                       }
 04FC                   .dbline 405
 04FC           ;               break;
 04FC 8005              xjmp L116
 04FE           L120:
 04FE                   .dbline 407
 04FE           ;               case DSM_STATE_BIND_RCV_START_ACK:
 04FE           ;                       {
 04FE                   .dbline 408
 04FE           ;                       DSM_initialize_bind_ack();
 04FE 94C5              xcall _DSM_initialize_bind_ack
 0500                   .dbline 409
 0500           ;                       DSM_StartBindAck();
 0500 9468              xcall _DSM_StartBindAck
 0502                   .dbline 410
 0502           ;                       }
 0502                   .dbline 411
 0502           ;       }
 0502           L115:
 0502           L116:
 0502                   .dbline 414
 0502           ; 
 0502           ;       //process interrupt
 0502           ;       if(CY_irq) //we got an IRQ from CYRF6936
 0502 3C0000            cmp [_CY_irq],0
 0505 A0AC              jz L121
 0507                   .dbline 416
 0507           ;       {
 0507           ;               BYTE Irq_Status[2];
 0507                   .dbline 417
 0507           ;               CY_irq=FALSE;
 0507 550000            mov [_CY_irq],0
 050A                   .dbline 418
 050A           ;               switch(State)
 050A 514A              mov A,[_State]
 050C 5405              mov [X+5],A
 050E 560400            mov [X+4],0
 0511 3D0400            cmp [X+4],0
 0514 B006              jnz X8
 0516 3D0501            cmp [X+5],1
 0519 A058              jz L130
 051B           X8:
 051B 3D0400            cmp [X+4],0
 051E B006              jnz X9
 0520 3D0502            cmp [X+5],2
 0523 A04E              jz L130
 0525           X9:
 0525 3D0400            cmp [X+4],0
 0528 B006              jnz X10
 052A 3D0504            cmp [X+5],4
 052D A021              jz L126
 052F           X10:
 052F 3D0400            cmp [X+4],0
 0532 B006              jnz X11
 0534 3D0506            cmp [X+5],6
 0537 A044              jz L133
 0539           X11:
 0539 3D0400            cmp [X+4],0
 053C B006              jnz X12
 053E 3D050A            cmp [X+5],10
 0541 A03A              jz L133
 0543           X12:
 0543 3D0400            cmp [X+4],0
 0546 B006              jnz X13
 0548 3D050B            cmp [X+5],11
 054B A030              jz L133
 054D           X13:
 054D 8038              xjmp L123
 054F           L126:
 054F                   .dbline 421
 054F           ;               {
 054F           ;                       case DSM_STATE_BIND_ACK:
 054F           ;                               {
 054F                   .dbline 423
 054F           ;                               //read IRQ status
 054F           ;                               CYRF_ReadRegisterMulti(CYRF_TX_IRQ_STATUS,Irq_Status,2);
 054F 5002              mov A,2
 0551 08                push A
 0552 5A00              mov [__r1],X
 0554 060002            add [__r1],2
 0557 5100              mov A,[__r0]
 0559 08                push A
 055A 5100              mov A,[__r1]
 055C 08                push A
 055D 5004              mov A,4
 055F 08                push A
 0560 7C0000            xcall _CYRF_ReadRegisterMulti
 0563 38FC              add SP,-4
 0565                   .dbline 424
 0565           ;                               Irq_Status[0]|=Irq_Status[1]&TXE_IRQ;
 0565 5203              mov A,[X+3]
 0567 2101              and A,1
 0569 2D02              or [X+2],A
 056B                   .dbline 426
 056B           ;                               //TX done
 056B           ;                               if(Irq_Status[0]&TXC_IRQ)
 056B 480202            tst [X+2],2
 056E A055              jz L122
 0570                   .dbline 428
 0570           ;                                       {
 0570           ;                                       }
 0570                   .dbline 428
 0570                   .dbline 429
 0570           ;                               }
 0570                   .dbline 430
 0570           ;                               break;
 0570 8053              xjmp L122
 0572           L130:
 0572                   .dbline 433
 0572           ;                       case DSM_STATE_BIND_RCV:
 0572           ;                       case DSM_STATE_BIND_RCV_WAIT:
 0572           ;                               {
 0572                   .dbline 435
 0572           ;                                       
 0572           ;                                       if (ProcessRxIrqStatus())
 0572 9EF4              xcall _ProcessRxIrqStatus
 0574 3900              cmp A,0
 0576 A04D              jz L122
 0578                   .dbline 438
 0578           ;                                               {
 0578           ;                                               //we got some thing
 0578           ;                                               Process_BindRcvIrq();   
 0578                   .dbline 438
 0578 94A6              xcall _Process_BindRcvIrq
 057A                   .dbline 439
 057A           ;                                               }
 057A                   .dbline 440
 057A           ;                               }
 057A                   .dbline 441
 057A           ;                               break;
 057A 8049              xjmp L122
 057C           L133:
 057C                   .dbline 445
 057C           ;                       case DSM_STATE_SYNC_AB:
 057C           ;                       case DSM_STATE_SYNC_X:
 057C           ;                       case DSM_STATE_LOCKED:  
 057C           ;                               {
 057C                   .dbline 446
 057C           ;                                       if(ProcessRxIrqStatus())
 057C 9EEA              xcall _ProcessRxIrqStatus
 057E 3900              cmp A,0
 0580 A043              jz L122
 0582                   .dbline 449
 0582           ;                                               {
 0582           ;                                               //we got some thing
 0582           ;                                               Process_Rvc_Irq();
 0582                   .dbline 449
 0582 9E36              xcall _Process_Rvc_Irq
 0584                   .dbline 450
 0584           ;                                               }
 0584                   .dbline 451
 0584           ;                               }
 0584                   .dbline 452
 0584           ;                               break;
 0584 803F              xjmp L122
 0586           L123:
 0586                   .dbline 454
 0586           ;                       default :
 0586           ;                               CYRF_ReadRegisterMulti(CYRF_TX_IRQ_STATUS,Irq_Status,2);
 0586 5002              mov A,2
 0588 08                push A
 0589 5A00              mov [__r1],X
 058B 060002            add [__r1],2
 058E 5100              mov A,[__r0]
 0590 08                push A
 0591 5100              mov A,[__r1]
 0593 08                push A
 0594 5004              mov A,4
 0596 08                push A
 0597 7C0000            xcall _CYRF_ReadRegisterMulti
 059A                   .dbline 455
 059A           ;                               CYRF_ReadRegisterMulti(CYRF_RX_IRQ_STATUS,Irq_Status,2);
 059A 5002              mov A,2
 059C 08                push A
 059D 5A00              mov [__r1],X
 059F 060002            add [__r1],2
 05A2 5100              mov A,[__r0]
 05A4 08                push A
 05A5 5100              mov A,[__r1]
 05A7 08                push A
 05A8 5007              mov A,7
 05AA 08                push A
 05AB 7C0000            xcall _CYRF_ReadRegisterMulti
 05AE 38F8              add SP,-8
 05B0                   .dbline 456
 05B0           ;               }
 05B0                   .dbline 457
 05B0           ;       }
 05B0 8013              xjmp L122
 05B2           L121:
 05B2                   .dbline 459
 05B2           ;       else //no IRQ to process
 05B2           ;       {
 05B2                   .dbline 460
 05B2           ;               if (New_RCV_Data&& Ch_A)
 05B2 3C0600            cmp [_New_RCV_Data],0
 05B5 A00E              jz L136
 05B7 3C0B00            cmp [_Ch_A],0
 05BA A009              jz L136
 05BC                   .dbline 462
 05BC           ;               {
 05BC           ;                       New_RCV_Data=FALSE;
 05BC                   .dbline 462
 05BC 550600            mov [_New_RCV_Data],0
 05BF                   .dbline 463
 05BF           ;                       Rcv_Timeout=FALSE;
 05BF 554800            mov [_Rcv_Timeout],0
 05C2                   .dbline 464
 05C2           ;                       ProcessNewData();
 05C2 9EFD              xcall _ProcessNewData
 05C4                   .dbline 465
 05C4           ;               }
 05C4           L136:
 05C4                   .dbline 466
 05C4           ;       }
 05C4           L122:
 05C4                   .dbline -2
 05C4           L114:
 05C4 38FA              add SP,-6
 05C6 20                pop X
 05C7                   .dbline 0 ; func end
 05C7 7F                ret
 05C8                   .dbsym l Irq_Status 2 A[2:2]c
 05C8                   .dbend
 05C8                   .dbfunc e calc_dsmx_channel _calc_dsmx_channel fV
 05C8           ;    count_52_76 -> X+20
 05C8           ;    count_28_51 -> X+18
 05C8           ;     count_3_27 -> X+16
 05C8           ;        next_ch -> X+15
 05C8           ;              i -> X+13
 05C8           ;             id -> X+5
 05C8           ;         id_tmp -> X+1
 05C8           ;            idx -> X+0
 05C8           _calc_dsmx_channel::
 05C8                   .dbline -1
 05C8 10                push X
 05C9 4F                mov X,SP
 05CA 3816              add SP,22
 05CC                   .dbline 475
 05CC           ; }
 05CC           ; 
 05CC           ; 
 05CC           ; //calculate dsmX channels 
 05CC           ; //found on deviation-tx source
 05CC           ; // math by Alexandr Alexandrov code by Sergey Gimaev
 05CC           ; //pseudo random gennerator /Linear congruential generator based on "Numerical Recipes" Chapter 7.1
 05CC           ; void calc_dsmx_channel(void)
 05CC           ; {
 05CC                   .dbline 478
 05CC           ;     BYTE idx; 
 05CC           ;       DWORD id_tmp;
 05CC           ;     DWORD id = ~(((DWORD)cyrfmfg_id[0] << 24) | ((DWORD)cyrfmfg_id[1] << 16) | ((DWORD)cyrfmfg_id[2] << 8) | (((DWORD)cyrfmfg_id[3]) << 0));
 05CC 5F0035            mov [__r3],[_config+3]
 05CF 560900            mov [X+9],0
 05D2 560A00            mov [X+10],0
 05D5 560B00            mov [X+11],0
 05D8 5100              mov A,[__r3]
 05DA 540C              mov [X+12],A
 05DC 5F0034            mov [__r7],[_config+2]
 05DF 550000            mov [__r6],0
 05E2 550000            mov [__r5],0
 05E5 550000            mov [__r4],0
 05E8 5008              mov A,8
 05EA           X14:
 05EA 6500              asl [__r7]
 05EC 6B00              rlc [__r6]
 05EE 6B00              rlc [__r5]
 05F0 6B00              rlc [__r4]
 05F2 78                dec A
 05F3 BFF6              jnz X14
 05F5 5F0033            mov [__r11],[_config+1]
 05F8 550000            mov [__r10],0
 05FB 550000            mov [__r9],0
 05FE 550000            mov [__r8],0
 0601 5010              mov A,16
 0603           X15:
 0603 6500              asl [__r11]
 0605 6B00              rlc [__r10]
 0607 6B00              rlc [__r9]
 0609 6B00              rlc [__r8]
 060B 78                dec A
 060C BFF6              jnz X15
 060E 5F0032            mov [__r3],[_config]
 0611 550000            mov [__r2],0
 0614 550000            mov [__r1],0
 0617 550000            mov [__r0],0
 061A 5018              mov A,24
 061C           X16:
 061C 6500              asl [__r3]
 061E 6B00              rlc [__r2]
 0620 6B00              rlc [__r1]
 0622 6B00              rlc [__r0]
 0624 78                dec A
 0625 BFF6              jnz X16
 0627 5100              mov A,[__r11]
 0629 2C00              or [__r3],A
 062B 5100              mov A,[__r10]
 062D 2C00              or [__r2],A
 062F 5100              mov A,[__r9]
 0631 2C00              or [__r1],A
 0633 5100              mov A,[__r8]
 0635 2C00              or [__r0],A
 0637 5100              mov A,[__r7]
 0639 2C00              or [__r3],A
 063B 5100              mov A,[__r6]
 063D 2C00              or [__r2],A
 063F 5100              mov A,[__r5]
 0641 2C00              or [__r1],A
 0643 5100              mov A,[__r4]
 0645 2C00              or [__r0],A
 0647 520C              mov A,[X+12]
 0649 2C00              or [__r3],A
 064B 520B              mov A,[X+11]
 064D 2C00              or [__r2],A
 064F 520A              mov A,[X+10]
 0651 2C00              or [__r1],A
 0653 5209              mov A,[X+9]
 0655 2C00              or [__r0],A
 0657 5100              mov A,[__r0]
 0659 73                cpl A
 065A 5405              mov [X+5],A
 065C 5100              mov A,[__r1]
 065E 73                cpl A
 065F 5406              mov [X+6],A
 0661 5100              mov A,[__r2]
 0663 73                cpl A
 0664 5407              mov [X+7],A
 0666 5100              mov A,[__r3]
 0668 73                cpl A
 0669 5408              mov [X+8],A
 066B                   .dbline 479
 066B           ;       idx = 0;
 066B 560000            mov [X+0],0
 066E                   .dbline 480
 066E           ;     id_tmp = id;
 066E 5205              mov A,[X+5]
 0670 5401              mov [X+1],A
 0672 5206              mov A,[X+6]
 0674 5402              mov [X+2],A
 0676 5207              mov A,[X+7]
 0678 5403              mov [X+3],A
 067A 5208              mov A,[X+8]
 067C 5404              mov [X+4],A
 067E 819B              xjmp L143
 0680           L142:
 0680                   .dbline 481
 0680           ;     while(idx < 23) {
 0680                   .dbline 484
 0680           ;         int i;
 0680           ;         BYTE next_ch;
 0680           ;               int count_3_27 = 0, count_28_51 = 0, count_52_76 = 0;
 0680 561100            mov [X+17],0
 0683 561000            mov [X+16],0
 0686                   .dbline 484
 0686 561300            mov [X+19],0
 0689 561200            mov [X+18],0
 068C                   .dbline 484
 068C 561500            mov [X+21],0
 068F 561400            mov [X+20],0
 0692                   .dbline 485
 0692           ;         id_tmp = id_tmp * 0x0019660D + 0x3C6EF35F; // Randomization
 0692 5201              mov A,[X+1]
 0694 08                push A
 0695 5202              mov A,[X+2]
 0697 08                push A
 0698 5203              mov A,[X+3]
 069A 08                push A
 069B 5204              mov A,[X+4]
 069D 08                push A
 069E 5000              mov A,0
 06A0 08                push A
 06A1 5019              mov A,25
 06A3 08                push A
 06A4 5066              mov A,102
 06A6 08                push A
 06A7 500D              mov A,13
 06A9 08                push A
 06AA 7C0000            xcall __mul_32X32_32
 06AD 38FC              add SP,-4
 06AF 18                pop A
 06B0 5300              mov [__r3],A
 06B2 18                pop A
 06B3 5300              mov [__r2],A
 06B5 18                pop A
 06B6 5300              mov [__r1],A
 06B8 18                pop A
 06B9 5300              mov [__r0],A
 06BB 5100              mov A,[__r3]
 06BD 015F              add A,95
 06BF 5404              mov [X+4],A
 06C1 5100              mov A,[__r2]
 06C3 09F3              adc A,-13
 06C5 5403              mov [X+3],A
 06C7 5100              mov A,[__r1]
 06C9 096E              adc A,110
 06CB 5402              mov [X+2],A
 06CD 5100              mov A,[__r0]
 06CF 093C              adc A,60
 06D1 5401              mov [X+1],A
 06D3                   .dbline 486
 06D3           ;         next_ch = ((id_tmp >> 8) % 0x49) + 3;       // Use least-significant byte and must be larger than 3
 06D3 5201              mov A,[X+1]
 06D5 5300              mov [__r0],A
 06D7 5202              mov A,[X+2]
 06D9 5300              mov [__r1],A
 06DB 5203              mov A,[X+3]
 06DD 5300              mov [__r2],A
 06DF 5204              mov A,[X+4]
 06E1 5300              mov [__r3],A
 06E3 5008              mov A,8
 06E5           X17:
 06E5 70FB              and F,-5
 06E7 6E00              rrc [__r0]
 06E9 6E00              rrc [__r1]
 06EB 6E00              rrc [__r2]
 06ED 6E00              rrc [__r3]
 06EF 78                dec A
 06F0 BFF4              jnz X17
 06F2 5000              mov A,0
 06F4 08                push A
 06F5 08                push A
 06F6 08                push A
 06F7 5049              mov A,73
 06F9 08                push A
 06FA 5100              mov A,[__r0]
 06FC 08                push A
 06FD 5100              mov A,[__r1]
 06FF 08                push A
 0700 5100              mov A,[__r2]
 0702 08                push A
 0703 5100              mov A,[__r3]
 0705 08                push A
 0706 7C0000            xcall __divmodu_32X32_32
 0709 38FC              add SP,-4
 070B 18                pop A
 070C 5300              mov [__r3],A
 070E 18                pop A
 070F 18                pop A
 0710 18                pop A
 0711 060003            add [__r3],3
 0714 5100              mov A,[__r3]
 0716 540F              mov [X+15],A
 0718                   .dbline 487
 0718           ;         if (((next_ch ^ id) & 0x01 )== 0)
 0718 520F              mov A,[X+15]
 071A 5300              mov [__r3],A
 071C 550000            mov [__r2],0
 071F 550000            mov [__r1],0
 0722 550000            mov [__r0],0
 0725 5208              mov A,[X+8]
 0727 3400              xor [__r3],A
 0729 5207              mov A,[X+7]
 072B 3400              xor [__r2],A
 072D 5206              mov A,[X+6]
 072F 3400              xor [__r1],A
 0731 5205              mov A,[X+5]
 0733 3400              xor [__r0],A
 0735 260001            and [__r3],1
 0738 260000            and [__r2],0
 073B 260000            and [__r1],0
 073E 260000            and [__r0],0
 0741 B012              jnz L145
 0743 3C0000            cmp [__r1],0
 0746 B00D              jnz L145
 0748 3C0000            cmp [__r2],0
 074B B008              jnz L145
 074D 3C0000            cmp [__r3],0
 0750 B003              jnz L145
 0752           X18:
 0752                   .dbline 488
 0752           ;             continue;
 0752 80C7              xjmp L143
 0754           L145:
 0754                   .dbline 489
 0754           ;         for (i = 0; i < idx; i++) {
 0754 560E00            mov [X+14],0
 0757 560D00            mov [X+13],0
 075A 8047              xjmp L150
 075C           L147:
 075C                   .dbline 489
 075C                   .dbline 490
 075C           ;             if(channels[i] == next_ch)
 075C 520E              mov A,[X+14]
 075E 010D              add A,<_channels
 0760 5300              mov [__r1],A
 0762 3E00              mvi A,[__r1]
 0764 3B0F              cmp A,[X+15]
 0766 B003              jnz L151
 0768                   .dbline 491
 0768           ;                 break;
 0768 804F              xjmp L149
 076A           L151:
 076A                   .dbline 492
 076A           ;             if(channels[i] <= 27)
 076A 520E              mov A,[X+14]
 076C 010D              add A,<_channels
 076E 5300              mov [__r1],A
 0770 3E00              mvi A,[__r1]
 0772 5300              mov [__r0],A
 0774 501B              mov A,27
 0776 3A00              cmp A,[__r0]
 0778 C008              jc L153
 077A           X19:
 077A                   .dbline 493
 077A           ;                 count_3_27++;
 077A 7711              inc [X+17]
 077C 0F1000            adc [X+16],0
 077F 801D              xjmp L154
 0781           L153:
 0781                   .dbline 494
 0781           ;             else if (channels[i] <= 51)
 0781 520E              mov A,[X+14]
 0783 010D              add A,<_channels
 0785 5300              mov [__r1],A
 0787 3E00              mvi A,[__r1]
 0789 5300              mov [__r0],A
 078B 5033              mov A,51
 078D 3A00              cmp A,[__r0]
 078F C008              jc L155
 0791           X20:
 0791                   .dbline 495
 0791           ;                 count_28_51++;
 0791 7713              inc [X+19]
 0793 0F1200            adc [X+18],0
 0796 8006              xjmp L156
 0798           L155:
 0798                   .dbline 497
 0798           ;             else
 0798           ;                 count_52_76++;
 0798 7715              inc [X+21]
 079A 0F1400            adc [X+20],0
 079D           L156:
 079D           L154:
 079D                   .dbline 498
 079D           ;         }
 079D           L148:
 079D                   .dbline 489
 079D 770E              inc [X+14]
 079F 0F0D00            adc [X+13],0
 07A2           L150:
 07A2                   .dbline 489
 07A2 5200              mov A,[X+0]
 07A4 5300              mov [__r1],A
 07A6 520E              mov A,[X+14]
 07A8 1200              sub A,[__r1]
 07AA 5000              mov A,0
 07AC 3180              xor A,-128
 07AE 5300              mov [__rX],A
 07B0 520D              mov A,[X+13]
 07B2 3180              xor A,-128
 07B4 1A00              sbb A,[__rX]
 07B6 CFA5              jc L147
 07B8           X21:
 07B8           L149:
 07B8                   .dbline 499
 07B8           ;         if (i != idx)
 07B8 5200              mov A,[X+0]
 07BA 5300              mov [__r1],A
 07BC 550000            mov [__r0],0
 07BF 520D              mov A,[X+13]
 07C1 3A00              cmp A,[__r0]
 07C3 B007              jnz X22
 07C5 520E              mov A,[X+14]
 07C7 3A00              cmp A,[__r1]
 07C9 A003              jz L157
 07CB           X22:
 07CB                   .dbline 500
 07CB           ;             continue;
 07CB 804E              xjmp L143
 07CD           L157:
 07CD                   .dbline 501
 07CD           ;         if ((next_ch < 28 && count_3_27 < 8)
 07CD 3D0F1C            cmp [X+15],28
 07D0 D00D              jnc L162
 07D2           X23:
 07D2 5211              mov A,[X+17]
 07D4 1108              sub A,8
 07D6 5210              mov A,[X+16]
 07D8 3180              xor A,-128
 07DA 1980              sbb A,(0 ^ 0x80)
 07DC C028              jc L163
 07DE           X24:
 07DE           L162:
 07DE 3D0F1C            cmp [X+15],28
 07E1 C012              jc L165
 07E3           X25:
 07E3 3D0F34            cmp [X+15],52
 07E6 D00D              jnc L165
 07E8           X26:
 07E8 5213              mov A,[X+19]
 07EA 1107              sub A,7
 07EC 5212              mov A,[X+18]
 07EE 3180              xor A,-128
 07F0 1980              sbb A,(0 ^ 0x80)
 07F2 C012              jc L163
 07F4           X27:
 07F4           L165:
 07F4 3D0F34            cmp [X+15],52
 07F7 C022              jc L159
 07F9           X28:
 07F9 5215              mov A,[X+21]
 07FB 1108              sub A,8
 07FD 5214              mov A,[X+20]
 07FF 3180              xor A,-128
 0801 1980              sbb A,(0 ^ 0x80)
 0803 D016              jnc L159
 0805           X29:
 0805           L163:
 0805                   .dbline 505
 0805           ;           ||(next_ch >= 28 && next_ch < 52 && count_28_51 < 7)
 0805           ;           ||(next_ch >= 52 && count_52_76 < 8))
 0805           ;         {
 0805           ;             channels[idx++] = next_ch;
 0805                   .dbline 505
 0805 5200              mov A,[X+0]
 0807 5300              mov [__r1],A
 0809 550000            mov [__r0],0
 080C 0101              add A,1
 080E 5400              mov [X+0],A
 0810 06000D            add [__r1],<_channels
 0813 0E000D            adc [__r0],>_channels
 0816 520F              mov A,[X+15]
 0818 3F00              mvi [__r1],A
 081A                   .dbline 506
 081A           ;         }
 081A           L159:
 081A                   .dbline 507
 081A           ;     }
 081A           L143:
 081A                   .dbline 481
 081A 3D0017            cmp [X+0],23
 081D CE62              jc L142
 081F           X30:
 081F                   .dbline -2
 081F           L138:
 081F 38EA              add SP,-22
 0821 20                pop X
 0822                   .dbline 0 ; func end
 0822 7F                ret
 0823                   .dbsym l count_52_76 20 I
 0823                   .dbsym l count_28_51 18 I
 0823                   .dbsym l count_3_27 16 I
 0823                   .dbsym l next_ch 15 c
 0823                   .dbsym l i 13 I
 0823                   .dbsym l id 5 l
 0823                   .dbsym l id_tmp 1 l
 0823                   .dbsym l idx 0 c
 0823                   .dbend
 0823                   .dbfunc e DSM_Init _DSM_Init fV
 0823           ;              n -> X+0
 0823           _DSM_Init::
 0823                   .dbline -1
 0823 10                push X
 0824 4F                mov X,SP
 0825 3801              add SP,1
 0827                   .dbline 513
 0827           ; }
 0827           ; 
 0827           ; 
 0827           ; //initialise system
 0827           ; void DSM_Init(void)
 0827           ; {
 0827                   .dbline 515
 0827           ;       BYTE n;
 0827           ;       new_data=FALSE;
 0827 554900            mov [_new_data],0
 082A                   .dbline 517
 082A           ;       //init CYRF6936
 082A           ;       CYRF_Init();
 082A 7C0000            xcall _CYRF_Init
 082D                   .dbline 519
 082D           ;       //set defalut values
 082D           ;       DSM_Is_DSMX=FALSE;
 082D 553600            mov [_config+4],0
 0830                   .dbline 520
 0830           ;       DSM_Is_11ms=FALSE;
 0830 553700            mov [_config+5],0
 0833                   .dbline 521
 0833           ;       DSM_Is_11Bit=FALSE;
 0833 553800            mov [_config+6],0
 0836                   .dbline 522
 0836           ;       Ch_A=TRUE;
 0836 550B01            mov [_Ch_A],1
 0839                   .dbline 523
 0839           ;       chidx=0;
 0839 550C00            mov [_chidx],0
 083C                   .dbline 524
 083C           ;       Preste_Failsafe=FALSE;
 083C 553900            mov [_config+7],0
 083F                   .dbline 525
 083F           ;       DSM_Load_Config(init_vals,sizeof(init_vals)/(sizeof(BYTE)*2));
 083F 5010              mov A,16
 0841 08                push A
 0842 5070              mov A,>_init_vals
 0844 08                push A
 0845 5070              mov A,<_init_vals
 0847 08                push A
 0848 9954              xcall _DSM_Load_Config
 084A                   .dbline 527
 084A           ; 
 084A           ;       CYRF_WritePreamble(preamble);
 084A 5003              mov A,3
 084C 08                push A
 084D 5098              mov A,>_preamble
 084F 08                push A
 0850 5098              mov A,<_preamble
 0852 08                push A
 0853 5024              mov A,36
 0855 08                push A
 0856 7C0000            xcall _CYRF_WriteRegisterMulti
 0859 38F9              add SP,-7
 085B                   .dbline -2
 085B           L166:
 085B 38FF              add SP,-1
 085D 20                pop X
 085E                   .dbline 0 ; func end
 085E 7F                ret
 085F                   .dbsym l n 0 c
 085F                   .dbend
                        .area lit(rom, con, rel, lit)
 019B           _bind_vals:
 019B 033F              .byte 3,63
 019D 104A              .byte 16,'J
 019F 1F04              .byte 31,4
 01A1 1E04              .byte 30,4
 01A3 1402              .byte 20,2
 01A5                   .dbsym s bind_vals _bind_vals A[10:5:2]kc
                        .area text(rom, con, rel)
 085F                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 085F                   .dbfunc e DSM_initialize_bind _DSM_initialize_bind fV
 085F           _DSM_initialize_bind::
 085F                   .dbline -1
 085F                   .dbline 544
 085F           ; }
 085F           ; 
 085F           ; /*++++++++++BIND STUFF****************/
 085F           ; static const BYTE bind_vals[][2] = {
 085F           ;     {CYRF_TX_CFG,TX_DC_LEN|TX_DM(TX_DM_SDR)|DSM_BIND_POWER}, //0x38 Set 64 chip, SDR mode
 085F           ;     {CYRF_FRAMING_CFG,SOP_LEN|0xA}, //0x4A set sop len  32 chip and threshold =0xA 
 085F           ;     {CYRF_TX_OVERRIDE, DIS_TXCRC}, //0x4 disable tx CRC
 085F           ;     {CYRF_RX_OVERRIDE, DIS_RXCRC}, //0x4 disable rx CRC
 085F           ;     {CYRF_EOP_CTRL, 0x02}, //set EOP sync == 2
 085F           ; };
 085F           ; BYTE Bind_cnt;                //bind ack pulse counter
 085F           ; BYTE bind_channal;    //channel used to send bind packes
 085F           ; 
 085F           ; 
 085F           ; //initialize bind state
 085F           ; void DSM_initialize_bind(void)
 085F           ; {     
 085F                   .dbline 545
 085F           ;       State=DSM_STATE_BIND;
 085F 554A00            mov [_State],0
 0862                   .dbline 546
 0862           ;       DSM_Load_Config(bind_vals,sizeof(bind_vals)/(sizeof(BYTE)*2));
 0862 5005              mov A,5
 0864 08                push A
 0865 509B              mov A,>_bind_vals
 0867 08                push A
 0868 509B              mov A,<_bind_vals
 086A 08                push A
 086B 9931              xcall _DSM_Load_Config
 086D 38FD              add SP,-3
 086F                   .dbline 547
 086F           ;       bind_channal=1;
 086F 550401            mov [_bind_channal],1
 0872                   .dbline 548
 0872           ;       Bind_cnt=0;
 0872 550500            mov [_Bind_cnt],0
 0875                   .dbline 549
 0875           ;       CYRF_SetRFChannel(bind_channal);
 0875 5104              mov A,[_bind_channal]
 0877 08                push A
 0878 5000              mov A,0
 087A 08                push A
 087B 7C0000            xcall _CYRF_WriteRegister
 087E                   .dbline 550
 087E           ;       CYRF_SetDataCode(pncodes[0][8], 16);
 087E 5010              mov A,16
 0880 08                push A
 0881 5048              mov A,>_pncodes+64
 0883 08                push A
 0884 5048              mov A,<_pncodes+64
 0886 08                push A
 0887 5023              mov A,35
 0889 08                push A
 088A 7C0000            xcall _CYRF_WriteRegisterMulti
 088D 38FA              add SP,-6
 088F                   .dbline 551
 088F           ;       Timer_SetPeriod(DSM_TIME_BIND_RCV);
 088F 10                push X
 0890 502E              mov A,46
 0892 7C0000            xcall _Timer8_1_WritePeriod
 0895 20                pop X
 0896                   .dbline 552
 0896           ;       Timer_SetCallback(Bind_TimeOut_cb);
 0896 5004              mov A,>PL_Bind_TimeOut_cb
 0898 08                push A
 0899 5004              mov A,<PL_Bind_TimeOut_cb
 089B 08                push A
 089C 7C0000            xcall _Timer_SetCallback
 089F 38FE              add SP,-2
 08A1                   .dbline 553
 08A1           ;       Timer_Start();
 08A1 10                push X
 08A2 7C0000            xcall _Timer8_1_Start
 08A5 20                pop X
 08A6                   .dbline -2
 08A6           L171:
 08A6                   .dbline 0 ; func end
 08A6 7F                ret
 08A7                   .dbend
 08A7                   .dbfunc e DSM_Build_Ack_package _DSM_Build_Ack_package fV
 08A7           ;          ckSum -> X+1
 08A7           ;              i -> X+0
 08A7           _DSM_Build_Ack_package::
 08A7                   .dbline -1
 08A7 10                push X
 08A8 4F                mov X,SP
 08A9 380D              add SP,13
 08AB                   .dbline 558
 08AB           ; }
 08AB           ; 
 08AB           ; 
 08AB           ; void DSM_Build_Ack_package(void)
 08AB           ; {
 08AB                   .dbline 560
 08AB           ;       BYTE i;
 08AB           ;     WORD ckSum = 0x170;
 08AB 560270            mov [X+2],112
 08AE 560101            mov [X+1],1
 08B1                   .dbline 561
 08B1           ;       tx_buf[0]=rx_buf[0];
 08B1 5F0010            mov [_mem],[_mem+16]
 08B4                   .dbline 562
 08B4           ;       tx_buf[1]=rx_buf[1];
 08B4 5F0111            mov [_mem+1],[_mem+16+1]
 08B7                   .dbline 563
 08B7           ;       tx_buf[2]=rx_buf[2];
 08B7 5F0212            mov [_mem+2],[_mem+16+2]
 08BA                   .dbline 564
 08BA           ;       tx_buf[3]=rx_buf[3];
 08BA 5F0313            mov [_mem+3],[_mem+16+3]
 08BD                   .dbline 565
 08BD           ;     tx_buf[4]=rx_buf[10];
 08BD 5F041A            mov [_mem+4],[_mem+16+10]
 08C0                   .dbline 566
 08C0           ;     tx_buf[5]=num_channels;
 08C0 5F0508            mov [_mem+5],[_num_channels]
 08C3                   .dbline 567
 08C3           ;     tx_buf[6]=DSM_Is_DSMX?(DSM_Is_11ms?0xB2:0xA2):DSM_Is_11Bit?(DSM_Is_11ms?0x12:0x11):(DSM_Is_11ms?0x02:0x01); //rx_buf[12]; //protocoll
 08C3 3C3600            cmp [_config+4],0
 08C6 A01E              jz L199
 08C8 3C3700            cmp [_config+5],0
 08CB A009              jz L201
 08CD 5606B2            mov [X+6],-78
 08D0 560500            mov [X+5],0
 08D3 8007              xjmp L202
 08D5           L201:
 08D5 5606A2            mov [X+6],-94
 08D8 560500            mov [X+5],0
 08DB           L202:
 08DB 5206              mov A,[X+6]
 08DD 5404              mov [X+4],A
 08DF 5205              mov A,[X+5]
 08E1 5403              mov [X+3],A
 08E3 8046              xjmp L200
 08E5           L199:
 08E5 3C3800            cmp [_config+6],0
 08E8 A01E              jz L203
 08EA 3C3700            cmp [_config+5],0
 08ED A009              jz L205
 08EF 560A12            mov [X+10],18
 08F2 560900            mov [X+9],0
 08F5 8007              xjmp L206
 08F7           L205:
 08F7 560A11            mov [X+10],17
 08FA 560900            mov [X+9],0
 08FD           L206:
 08FD 520A              mov A,[X+10]
 08FF 5408              mov [X+8],A
 0901 5209              mov A,[X+9]
 0903 5407              mov [X+7],A
 0905 801C              xjmp L204
 0907           L203:
 0907 3C3700            cmp [_config+5],0
 090A A009              jz L207
 090C 560C02            mov [X+12],2
 090F 560B00            mov [X+11],0
 0912 8007              xjmp L208
 0914           L207:
 0914 560C01            mov [X+12],1
 0917 560B00            mov [X+11],0
 091A           L208:
 091A 520C              mov A,[X+12]
 091C 5408              mov [X+8],A
 091E 520B              mov A,[X+11]
 0920 5407              mov [X+7],A
 0922           L204:
 0922 5208              mov A,[X+8]
 0924 5404              mov [X+4],A
 0926 5207              mov A,[X+7]
 0928 5403              mov [X+3],A
 092A           L200:
 092A 5204              mov A,[X+4]
 092C 5306              mov [_mem+6],A
 092E                   .dbline 568
 092E           ;     tx_buf[7]=rx_buf[13];//???
 092E 5F071D            mov [_mem+7],[_mem+16+13]
 0931                   .dbline 570
 0931           ; 
 0931           ;       for (i = 0; i < 8; i++)
 0931 560000            mov [X+0],0
 0934 8012              xjmp L215
 0936           L212:
 0936                   .dbline 571
 0936           ;          ckSum += tx_buf[i];
 0936 5200              mov A,[X+0]
 0938 0100              add A,<_mem
 093A 5300              mov [__r1],A
 093C 3E00              mvi A,[__r1]
 093E 0502              add [X+2],A
 0940 5000              mov A,0
 0942 0F0100            adc [X+1],0
 0945           L213:
 0945                   .dbline 570
 0945 7700              inc [X+0]
 0947           L215:
 0947                   .dbline 570
 0947 3D0008            cmp [X+0],8
 094A CFEB              jc L212
 094C           X31:
 094C                   .dbline 572
 094C           ;       tx_buf[8]=(ckSum >> 8);
 094C 5201              mov A,[X+1]
 094E 5308              mov [_mem+8],A
 0950                   .dbline 573
 0950           ;       tx_buf[9]=(ckSum & 0xff);
 0950 5202              mov A,[X+2]
 0952 5309              mov [_mem+9],A
 0954                   .dbline -2
 0954           L173:
 0954 38F3              add SP,-13
 0956 20                pop X
 0957                   .dbline 0 ; func end
 0957 7F                ret
 0958                   .dbsym l ckSum 1 i
 0958                   .dbsym l i 0 c
 0958                   .dbend
 0958                   .dbfunc e DSM_StartRcv _DSM_StartRcv fV
 0958           _DSM_StartRcv::
 0958                   .dbline -1
 0958                   .dbline 579
 0958           ; }
 0958           ; 
 0958           ; 
 0958           ; //start waiting for the bind recive signal
 0958           ; void DSM_StartRcv(void)
 0958           ; {
 0958                   .dbline 580
 0958           ;               CYRF_StartReceive();
 0958 5083              mov A,-125
 095A 08                push A
 095B 5005              mov A,5
 095D 08                push A
 095E 7C0000            xcall _CYRF_WriteRegister
 0961                   .dbline 581
 0961           ;               CYRF_ReadRSSI();
 0961 5013              mov A,19
 0963 08                push A
 0964 7C0000            xcall _CYRF_ReadRegister
 0967 38FD              add SP,-3
 0969                   .dbline -2
 0969           L218:
 0969                   .dbline 0 ; func end
 0969 7F                ret
 096A                   .dbend
 096A                   .dbfunc e DSM_StartBindAck _DSM_StartBindAck fV
 096A           _DSM_StartBindAck::
 096A                   .dbline -1
 096A                   .dbline 585
 096A           ; }
 096A           ; 
 096A           ; void DSM_StartBindAck(void)
 096A           ; {
 096A                   .dbline 586
 096A           ;       CYRF_WriteRegisterInc(CYRF_TX_LENGTH,tx_cmd,sizeof(tx_cmd)/sizeof(BYTE));
 096A 5002              mov A,2
 096C 08                push A
 096D 5000              mov A,>_tx_cmd
 096F 08                push A
 0970 5000              mov A,<_tx_cmd
 0972 08                push A
 0973 5001              mov A,1
 0975 08                push A
 0976 7C0000            xcall _CYRF_WriteRegisterInc
 0979                   .dbline 587
 0979           ;       CYRF_WriteTx_Data(tx_buf);
 0979 5010              mov A,16
 097B 08                push A
 097C 5000              mov A,>_mem
 097E 08                push A
 097F 5000              mov A,<_mem
 0981 08                push A
 0982 5020              mov A,32
 0984 08                push A
 0985 7C0000            xcall _CYRF_WriteRegisterMultiD
 0988 38F8              add SP,-8
 098A                   .dbline -2
 098A           L219:
 098A                   .dbline 0 ; func end
 098A 7F                ret
 098B                   .dbend
 098B                   .dbfunc e Bind_xfer_cb _Bind_xfer_cb fV
 098B           ;              i -> X+0
 098B           _Bind_xfer_cb::
 098B                   .dbline -1
 098B 10                push X
 098C 4F                mov X,SP
 098D 3801              add SP,1
 098F                   .dbline 592
 098F           ; }
 098F           ; 
 098F           ; 
 098F           ; void Bind_xfer_cb(void)
 098F           ; {
 098F                   .dbline 595
 098F           ;       BYTE i;
 098F           ; 
 098F           ;       if (Bind_cnt)
 098F 3C0500            cmp [_Bind_cnt],0
 0992 A007              jz L221
 0994                   .dbline 597
 0994           ;       {
 0994           ;               Bind_cnt--;
 0994                   .dbline 597
 0994 7A05              dec [_Bind_cnt]
 0996                   .dbline 598
 0996           ;               DSM_StartBindAck();
 0996 9FD2              xcall _DSM_StartBindAck
 0998                   .dbline 599
 0998           ;       }
 0998 8028              xjmp L222
 099A           L221:
 099A                   .dbline 601
 099A           ;       else 
 099A           ;       {
 099A                   .dbline 602
 099A           ;               State=DSM_STATE_BIND_DONE;
 099A 554A05            mov [_State],5
 099D                   .dbline 607
 099D           ; #ifdef DEBUG
 099D           ;               LED_1_7_Off();
 099D           ; #endif
 099D           ;               //save Mfg ID of transmitter
 099D           ;               cyrfmfg_id[0]=~tx_buf[0];
 099D 5100              mov A,[_mem]
 099F 73                cpl A
 09A0 5332              mov [_config],A
 09A2                   .dbline 608
 09A2           ;               cyrfmfg_id[1]=~tx_buf[1];
 09A2 5101              mov A,[_mem+1]
 09A4 73                cpl A
 09A5 5333              mov [_config+1],A
 09A7                   .dbline 609
 09A7           ;               cyrfmfg_id[2]=~tx_buf[2];
 09A7 5102              mov A,[_mem+2]
 09A9 73                cpl A
 09AA 5334              mov [_config+2],A
 09AC                   .dbline 610
 09AC           ;               cyrfmfg_id[3]=~tx_buf[3];
 09AC 5103              mov A,[_mem+3]
 09AE 73                cpl A
 09AF 5335              mov [_config+3],A
 09B1                   .dbline 611
 09B1           ;               Timer_Stop();
 09B1 10                push X
 09B2 7C0000            xcall _Timer8_1_Stop
 09B5 20                pop X
 09B6                   .dbline 612
 09B6           ;               Timer_SetCallback(0);
 09B6 5002              mov A,>PL0
 09B8 08                push A
 09B9 5002              mov A,<PL0
 09BB 08                push A
 09BC 7C0000            xcall _Timer_SetCallback
 09BF 38FE              add SP,-2
 09C1                   .dbline 613
 09C1           ;       }
 09C1           L222:
 09C1                   .dbline -2
 09C1           L220:
 09C1 38FF              add SP,-1
 09C3 20                pop X
 09C4                   .dbline 0 ; func end
 09C4 7F                ret
 09C5                   .dbsym l i 0 c
 09C5                   .dbend
 09C5                   .dbfunc e DSM_initialize_bind_ack _DSM_initialize_bind_ack fV
 09C5           _DSM_initialize_bind_ack::
 09C5                   .dbline -1
 09C5                   .dbline 617
 09C5           ; }
 09C5           ; 
 09C5           ; void DSM_initialize_bind_ack(void)
 09C5           ; {
 09C5                   .dbline 618
 09C5           ;       DSM_Build_Ack_package();
 09C5 9EE0              xcall _DSM_Build_Ack_package
 09C7                   .dbline 619
 09C7           ;       State=DSM_STATE_BIND_ACK;
 09C7 554A04            mov [_State],4
 09CA                   .dbline 620
 09CA           ;     CYRF_SetDataCode(pn_bind, 16);
 09CA 5010              mov A,16
 09CC 08                push A
 09CD 5000              mov A,>_pn_bind
 09CF 08                push A
 09D0 5000              mov A,<_pn_bind
 09D2 08                push A
 09D3 5023              mov A,35
 09D5 08                push A
 09D6 7C0000            xcall _CYRF_WriteRegisterMulti
 09D9 38FC              add SP,-4
 09DB                   .dbline 621
 09DB           ;       Timer_Stop();
 09DB 10                push X
 09DC 7C0000            xcall _Timer8_1_Stop
 09DF                   .dbline 622
 09DF           ;       Timer_SetPeriod(DSM_TIME_BIND_ACK);
 09DF 5027              mov A,39
 09E1 7C0000            xcall _Timer8_1_WritePeriod
 09E4 20                pop X
 09E5                   .dbline 623
 09E5           ;       Timer_SetCallback(Bind_xfer_cb);
 09E5 5000              mov A,>PL_Bind_xfer_cb
 09E7 08                push A
 09E8 5000              mov A,<PL_Bind_xfer_cb
 09EA 08                push A
 09EB 7C0000            xcall _Timer_SetCallback
 09EE 38FE              add SP,-2
 09F0                   .dbline 624
 09F0           ;       Timer_Start();
 09F0 10                push X
 09F1 7C0000            xcall _Timer8_1_Start
 09F4 20                pop X
 09F5                   .dbline -2
 09F5           L229:
 09F5                   .dbline 0 ; func end
 09F5 7F                ret
 09F6                   .dbend
 09F6                   .dbfunc e Bind_TimeOut_cb _Bind_TimeOut_cb fV
 09F6           _Bind_TimeOut_cb::
 09F6                   .dbline -1
 09F6                   .dbline 628
 09F6           ; }
 09F6           ; 
 09F6           ; void Bind_TimeOut_cb(void)
 09F6           ; {
 09F6                   .dbline 629
 09F6           ;               DSM_ClearRxError();
 09F6 7C01E3            xcall _DSM_ClearRxError
 09F9                   .dbline 633
 09F9           ; #ifdef DEBUG
 09F9           ;               LED_1_5_Invert();
 09F9           ; #endif
 09F9           ;               if (State==DSM_STATE_BIND_RCV_WAIT) //wait for done
 09F9 3C4A02            cmp [_State],2
 09FC B009              jnz L231
 09FE                   .dbline 635
 09FE           ;               { 
 09FE           ;                       Bind_cnt=DSM_BIND_ACK_NUM;
 09FE                   .dbline 635
 09FE 550564            mov [_Bind_cnt],100
 0A01                   .dbline 636
 0A01           ;                       State=DSM_STATE_BIND_RCV_START_ACK;
 0A01 554A03            mov [_State],3
 0A04                   .dbline 637
 0A04           ;               }
 0A04 801A              xjmp L232
 0A06           L231:
 0A06                   .dbline 639
 0A06           ;               else 
 0A06           ;               {
 0A06                   .dbline 640
 0A06           ;               bind_channal=bind_channal+2;
 0A06 060402            add [_bind_channal],2
 0A09                   .dbline 641
 0A09           ;               if (bind_channal>DSM_MAX_CH)
 0A09 504F              mov A,79
 0A0B 3A04              cmp A,[_bind_channal]
 0A0D D004              jnc L233
 0A0F           X32:
 0A0F                   .dbline 642
 0A0F           ;                       bind_channal=1;
 0A0F 550401            mov [_bind_channal],1
 0A12           L233:
 0A12                   .dbline 643
 0A12           ;               CYRF_SetRFChannel(bind_channal);
 0A12 5104              mov A,[_bind_channal]
 0A14 08                push A
 0A15 5000              mov A,0
 0A17 08                push A
 0A18 7C0000            xcall _CYRF_WriteRegister
 0A1B 38FE              add SP,-2
 0A1D                   .dbline 644
 0A1D           ;               DSM_StartRcv();
 0A1D 9F39              xcall _DSM_StartRcv
 0A1F                   .dbline 645
 0A1F           ;               }
 0A1F           L232:
 0A1F                   .dbline -2
 0A1F           L230:
 0A1F                   .dbline 0 ; func end
 0A1F 7F                ret
 0A20                   .dbend
 0A20                   .dbfunc e Process_BindRcvIrq _Process_BindRcvIrq fV
 0A20           ;          ckSum -> X+1
 0A20           ;              n -> X+0
 0A20           _Process_BindRcvIrq::
 0A20                   .dbline -1
 0A20 10                push X
 0A21 4F                mov X,SP
 0A22 3807              add SP,7
 0A24                   .dbline 649
 0A24           ; }
 0A24           ; 
 0A24           ; void Process_BindRcvIrq(void)
 0A24           ; {
 0A24                   .dbline 651
 0A24           ;       BYTE n;
 0A24           ;     WORD ckSum= 384 - 0x10;
 0A24 560270            mov [X+2],112
 0A27 560101            mov [X+1],1
 0A2A                   .dbline 652
 0A2A           ;       Timer_Stop();
 0A2A 10                push X
 0A2B 7C0000            xcall _Timer8_1_Stop
 0A2E                   .dbline 653
 0A2E           ;       Timer_SetPeriod(DSM_TIME_BIND_RCV);
 0A2E 502E              mov A,46
 0A30 7C0000            xcall _Timer8_1_WritePeriod
 0A33                   .dbline 654
 0A33           ;       Timer_Start();
 0A33 7C0000            xcall _Timer8_1_Start
 0A36 20                pop X
 0A37                   .dbline 659
 0A37           ; #ifdef DEBUG
 0A37           ;       LED_1_4_Invert();
 0A37           ; #endif
 0A37           ;       //check recived data
 0A37           ;       if(rx_buf[0]!=rx_buf[4] || rx_buf[1]!=rx_buf[5] ||rx_buf[2]!=rx_buf[6] || rx_buf[3]!=rx_buf[7])
 0A37 5110              mov A,[_mem+16]
 0A39 3A14              cmp A,[_mem+16+4]
 0A3B B013              jnz L255
 0A3D 5111              mov A,[_mem+16+1]
 0A3F 3A15              cmp A,[_mem+16+5]
 0A41 B00D              jnz L255
 0A43 5112              mov A,[_mem+16+2]
 0A45 3A16              cmp A,[_mem+16+6]
 0A47 B007              jnz L255
 0A49 5113              mov A,[_mem+16+3]
 0A4B 3A17              cmp A,[_mem+16+7]
 0A4D A003              jz L236
 0A4F           L255:
 0A4F                   .dbline 661
 0A4F           ;       {
 0A4F           ;               goto Bind_rcv_error;
 0A4F                   .dbline 661
 0A4F 80E4              xjmp L256
 0A51           L236:
 0A51                   .dbline 664
 0A51           ;       }
 0A51           ;       //gennerate first checksum
 0A51           ;     for(n = 0; n < 8; n++)
 0A51 560000            mov [X+0],0
 0A54 8012              xjmp L260
 0A56           L257:
 0A56                   .dbline 665
 0A56           ;         ckSum += rx_buf[n];
 0A56 5200              mov A,[X+0]
 0A58 0110              add A,<_mem+16
 0A5A 5300              mov [__r1],A
 0A5C 3E00              mvi A,[__r1]
 0A5E 0502              add [X+2],A
 0A60 5000              mov A,0
 0A62 0F0100            adc [X+1],0
 0A65           L258:
 0A65                   .dbline 664
 0A65 7700              inc [X+0]
 0A67           L260:
 0A67                   .dbline 664
 0A67 3D0008            cmp [X+0],8
 0A6A CFEB              jc L257
 0A6C           X33:
 0A6C                   .dbline 666
 0A6C           ;       if(rx_buf[8] != (ckSum >> 8) || rx_buf[9] !=(ckSum & 0xff))
 0A6C 5201              mov A,[X+1]
 0A6E 5300              mov [__r1],A
 0A70 550000            mov [__r0],0
 0A73 5F0018            mov [__r3],[_mem+16+8]
 0A76 5000              mov A,0
 0A78 3A00              cmp A,[__r0]
 0A7A B01D              jnz L268
 0A7C 5100              mov A,[__r3]
 0A7E 3A00              cmp A,[__r1]
 0A80 B017              jnz L268
 0A82           X34:
 0A82 5202              mov A,[X+2]
 0A84 5300              mov [__r1],A
 0A86 550000            mov [__r0],0
 0A89 5F0019            mov [__r3],[_mem+16+9]
 0A8C 5000              mov A,0
 0A8E 3A00              cmp A,[__r0]
 0A90 B007              jnz X35
 0A92 5100              mov A,[__r3]
 0A94 3A00              cmp A,[__r1]
 0A96 A003              jz L262
 0A98           X35:
 0A98           L268:
 0A98                   .dbline 668
 0A98           ;       {
 0A98           ;               goto Bind_rcv_error;
 0A98                   .dbline 668
 0A98 809B              xjmp L256
 0A9A           L262:
 0A9A                   .dbline 671
 0A9A           ;       }
 0A9A           ;     //gennerate second checksum 
 0A9A           ;       for(n = 8; n < 14; n++)
 0A9A 560008            mov [X+0],8
 0A9D 8012              xjmp L272
 0A9F           L269:
 0A9F                   .dbline 672
 0A9F           ;         ckSum += rx_buf[n];
 0A9F 5200              mov A,[X+0]
 0AA1 0110              add A,<_mem+16
 0AA3 5300              mov [__r1],A
 0AA5 3E00              mvi A,[__r1]
 0AA7 0502              add [X+2],A
 0AA9 5000              mov A,0
 0AAB 0F0100            adc [X+1],0
 0AAE           L270:
 0AAE                   .dbline 671
 0AAE 7700              inc [X+0]
 0AB0           L272:
 0AB0                   .dbline 671
 0AB0 3D000E            cmp [X+0],14
 0AB3 CFEB              jc L269
 0AB5           X36:
 0AB5                   .dbline 673
 0AB5           ;       if(rx_buf[14] != (ckSum >> 8) || rx_buf[15] !=(ckSum & 0xff))
 0AB5 5201              mov A,[X+1]
 0AB7 5300              mov [__r1],A
 0AB9 550000            mov [__r0],0
 0ABC 5F001E            mov [__r3],[_mem+16+14]
 0ABF 5000              mov A,0
 0AC1 3A00              cmp A,[__r0]
 0AC3 B01D              jnz L280
 0AC5 5100              mov A,[__r3]
 0AC7 3A00              cmp A,[__r1]
 0AC9 B017              jnz L280
 0ACB           X37:
 0ACB 5202              mov A,[X+2]
 0ACD 5300              mov [__r1],A
 0ACF 550000            mov [__r0],0
 0AD2 5F001F            mov [__r3],[_mem+16+15]
 0AD5 5000              mov A,0
 0AD7 3A00              cmp A,[__r0]
 0AD9 B007              jnz X38
 0ADB 5100              mov A,[__r3]
 0ADD 3A00              cmp A,[__r1]
 0ADF A003              jz L274
 0AE1           X38:
 0AE1           L280:
 0AE1                   .dbline 675
 0AE1           ;       {
 0AE1           ;               goto Bind_rcv_error;
 0AE1                   .dbline 675
 0AE1 8052              xjmp L256
 0AE3           L274:
 0AE3                   .dbline 677
 0AE3           ;       }
 0AE3           ;       if (rx_buf[10] != 0x01)
 0AE3 3C1A01            cmp [_mem+16+10],1
 0AE6 A003              jz L281
 0AE8                   .dbline 679
 0AE8           ;       {
 0AE8           ;               goto Bind_rcv_error;
 0AE8                   .dbline 679
 0AE8 804B              xjmp L256
 0AEA           L281:
 0AEA                   .dbline 681
 0AEA           ;       }
 0AEA           ;       num_channels=rx_buf[11];
 0AEA 5F081B            mov [_num_channels],[_mem+16+11]
 0AED                   .dbline 682
 0AED           ;       if (num_channels>PPM_PULSE_COUNT)
 0AED 5007              mov A,7
 0AEF 3A08              cmp A,[_num_channels]
 0AF1 D004              jnc L287
 0AF3           X39:
 0AF3                   .dbline 683
 0AF3           ;               num_channels=PPM_PULSE_COUNT;
 0AF3 550807            mov [_num_channels],7
 0AF6           L287:
 0AF6                   .dbline 684
 0AF6           ;       DSM_Is_DSMX=PROTOC_IS_DSMX(rx_buf[12]);
 0AF6 511C              mov A,[_mem+16+12]
 0AF8 21A0              and A,-96
 0AFA 39A0              cmp A,-96
 0AFC B009              jnz L293
 0AFE 560401            mov [X+4],1
 0B01 560300            mov [X+3],0
 0B04 8007              xjmp L294
 0B06           L293:
 0B06 560400            mov [X+4],0
 0B09 560300            mov [X+3],0
 0B0C           L294:
 0B0C 5204              mov A,[X+4]
 0B0E 5336              mov [_config+4],A
 0B10                   .dbline 685
 0B10           ;       DSM_Is_11ms=FALSE; //PROTOC_IS_DSM_11MS(rx_buf[12]);
 0B10 553700            mov [_config+5],0
 0B13                   .dbline 686
 0B13           ;       DSM_Is_11Bit=PROTOC_IS_DSM_11BIT(rx_buf[12]);
 0B13 511C              mov A,[_mem+16+12]
 0B15 2130              and A,48
 0B17 67                asr A
 0B18 67                asr A
 0B19 67                asr A
 0B1A 67                asr A
 0B1B 210F              and A,15
 0B1D A009              jz L300
 0B1F 560601            mov [X+6],1
 0B22 560500            mov [X+5],0
 0B25 8007              xjmp L301
 0B27           L300:
 0B27 560600            mov [X+6],0
 0B2A 560500            mov [X+5],0
 0B2D           L301:
 0B2D 5206              mov A,[X+6]
 0B2F 5338              mov [_config+6],A
 0B31                   .dbline 687
 0B31           ;       State=DSM_STATE_BIND_RCV_WAIT;  
 0B31 554A02            mov [_State],2
 0B34           L256:
 0B34                   .dbline 690
 0B34           ; 
 0B34           ;       Bind_rcv_error:
 0B34           ;       DSM_StartRcv();
 0B34 9E22              xcall _DSM_StartRcv
 0B36                   .dbline -2
 0B36           L235:
 0B36 38F9              add SP,-7
 0B38 20                pop X
 0B39                   .dbline 0 ; func end
 0B39 7F                ret
 0B3A                   .dbsym l ckSum 1 i
 0B3A                   .dbsym l n 0 c
 0B3A                   .dbend
 0B3A                   .dbfunc e DSM_DeterminBitCount _DSM_DeterminBitCount fc
 0B3A           ;            min -> X+3
 0B3A           ;            max -> X+2
 0B3A           ;              n -> X+1
 0B3A           ;         chanal -> X+0
 0B3A           _DSM_DeterminBitCount::
 0B3A                   .dbline -1
 0B3A 10                push X
 0B3B 4F                mov X,SP
 0B3C 3804              add SP,4
 0B3E                   .dbline 695
 0B3E           ; }
 0B3E           ; //determin if we got 10 or 11 Bit data
 0B3E           ; // tryout
 0B3E           ; BYTE DSM_DeterminBitCount(void)
 0B3E           ; {
 0B3E                   .dbline 697
 0B3E           ;       //tryout
 0B3E           ;       BYTE min=0xff;
 0B3E 5603FF            mov [X+3],-1
 0B41                   .dbline 698
 0B41           ;       BYTE max=0;
 0B41 560200            mov [X+2],0
 0B44                   .dbline 702
 0B44           ;       BYTE chanal;
 0B44           ;       BYTE n;
 0B44           ;       //try 10 Bits
 0B44           ;       for (n=0;n<7;n++)
 0B44 560100            mov [X+1],0
 0B47 8038              xjmp L306
 0B49           L303:
 0B49                   .dbline 703
 0B49           ;       {
 0B49                   .dbline 704
 0B49           ;               chanal=(rx_data[n*2+2]>>2)&0xF;
 0B49 5201              mov A,[X+1]
 0B4B 64                asl A
 0B4C 0102              add A,<_mem+2
 0B4E 5300              mov [__r1],A
 0B50 3E00              mvi A,[__r1]
 0B52 67                asr A
 0B53 67                asr A
 0B54 210F              and A,15
 0B56 5400              mov [X+0],A
 0B58                   .dbline 705
 0B58           ;               if (chanal && chanal<min)
 0B58 3D0000            cmp [X+0],0
 0B5B A00B              jz L308
 0B5D 5200              mov A,[X+0]
 0B5F 3B03              cmp A,[X+3]
 0B61 D005              jnc L308
 0B63           X40:
 0B63                   .dbline 706
 0B63           ;                       min=chanal;
 0B63 5200              mov A,[X+0]
 0B65 5403              mov [X+3],A
 0B67           L308:
 0B67                   .dbline 707
 0B67           ;               if(rx_data[n*2+2]!=0xFF  && chanal>max)
 0B67 5201              mov A,[X+1]
 0B69 64                asl A
 0B6A 0102              add A,<_mem+2
 0B6C 5300              mov [__r1],A
 0B6E 3E00              mvi A,[__r1]
 0B70 39FF              cmp A,-1
 0B72 A00B              jz L310
 0B74 5202              mov A,[X+2]
 0B76 3B00              cmp A,[X+0]
 0B78 D005              jnc L310
 0B7A           X41:
 0B7A                   .dbline 708
 0B7A           ;                       max=chanal;
 0B7A 5200              mov A,[X+0]
 0B7C 5402              mov [X+2],A
 0B7E           L310:
 0B7E                   .dbline 709
 0B7E           ;       }               
 0B7E           L304:
 0B7E                   .dbline 702
 0B7E 7701              inc [X+1]
 0B80           L306:
 0B80                   .dbline 702
 0B80 3D0107            cmp [X+1],7
 0B83 CFC5              jc L303
 0B85           X42:
 0B85                   .dbline 710
 0B85           ;       if (min==1 &&  max && max <7)
 0B85 3D0301            cmp [X+3],1
 0B88 B00F              jnz L313
 0B8A 3D0200            cmp [X+2],0
 0B8D A00A              jz L313
 0B8F 3D0207            cmp [X+2],7
 0B92 D005              jnc L313
 0B94           X43:
 0B94                   .dbline 711
 0B94           ;               return 10;
 0B94 500A              mov A,10
 0B96 8003              xjmp L302
 0B98           L313:
 0B98                   .dbline 713
 0B98           ;       else 
 0B98           ;               return 11;
 0B98 500B              mov A,11
 0B9A                   .dbline -2
 0B9A           L302:
 0B9A 38FC              add SP,-4
 0B9C 20                pop X
 0B9D                   .dbline 0 ; func end
 0B9D 7F                ret
 0B9E                   .dbsym l min 3 c
 0B9E                   .dbsym l max 2 c
 0B9E                   .dbsym l n 1 c
 0B9E                   .dbsym l chanal 0 c
 0B9E                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0000           L316:
 0000                   .blkb 1
 0001           L321:
 0001                   .blkb 1
 0002           L322:
 0002                   .blkb 2
                        .area text(rom, con, rel)
 0B9E                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0B9E                   .dbfunc e DSM_process_Data _DSM_process_Data fc
 0B9E                   .dbsym s value L322 i
 0B9E                   .dbsym s chanal L321 c
 0B9E                   .dbsym s bits L316 c
 0B9E           ;              n -> X+0
 0B9E           _DSM_process_Data::
 0B9E                   .dbline -1
 0B9E 10                push X
 0B9F 4F                mov X,SP
 0BA0 3801              add SP,1
 0BA2                   .dbline 719
 0BA2           ; }
 0BA2           ; 
 0BA2           ; #define PPM_OFFSET (PPM_OUT_CENTER_LEN-1024)
 0BA2           ; //Extract chanal data from serial data
 0BA2           ; BOOL DSM_process_Data(void)
 0BA2           ; {
 0BA2                   .dbline 721
 0BA2           ; static BYTE bits;     
 0BA2           ;       if (!bits) //check if we have 10 or 11 Bit data
 0BA2 3C0000            cmp [L316],0
 0BA5 B005              jnz L317
 0BA7                   .dbline 722
 0BA7           ;               bits=DSM_DeterminBitCount();
 0BA7 9F91              xcall _DSM_DeterminBitCount
 0BA9 5300              mov [L316],A
 0BAB           L317:
 0BAB                   .dbline 723
 0BAB           ;       if (bits)
 0BAB 3C0000            cmp [L316],0
 0BAE A11B              jz L319
 0BB0                   .dbline 725
 0BB0           ;       {
 0BB0           ;       BYTE n;
 0BB0                   .dbline 730
 0BB0           ;       //static to safe stack space            
 0BB0           ;       static BYTE chanal; 
 0BB0           ;       static WORD value;      
 0BB0           ;               //loop thru the words 
 0BB0           ;               for (n=0;n<7;n++)
 0BB0 560000            mov [X+0],0
 0BB3 810D              xjmp L326
 0BB5           L323:
 0BB5                   .dbline 731
 0BB5           ;               {       //extract chanal number
 0BB5                   .dbline 732
 0BB5           ;                       if (bits==10)
 0BB5 3C000A            cmp [L316],10
 0BB8 B012              jnz L327
 0BBA                   .dbline 733
 0BBA           ;                               chanal=(rx_data[n*2+2]>>2)&0xF;
 0BBA 5200              mov A,[X+0]
 0BBC 64                asl A
 0BBD 0102              add A,<_mem+2
 0BBF 5300              mov [__r1],A
 0BC1 3E00              mvi A,[__r1]
 0BC3 67                asr A
 0BC4 67                asr A
 0BC5 210F              and A,15
 0BC7 5301              mov [L321],A
 0BC9 8011              xjmp L328
 0BCB           L327:
 0BCB                   .dbline 735
 0BCB           ;                       else 
 0BCB           ;                               chanal=(rx_data[n*2+2]>>3)&0xF;
 0BCB 5200              mov A,[X+0]
 0BCD 64                asl A
 0BCE 0102              add A,<_mem+2
 0BD0 5300              mov [__r1],A
 0BD2 3E00              mvi A,[__r1]
 0BD4 67                asr A
 0BD5 67                asr A
 0BD6 67                asr A
 0BD7 210F              and A,15
 0BD9 5301              mov [L321],A
 0BDB           L328:
 0BDB                   .dbline 737
 0BDB           ;                       //check if chanal numer is in range
 0BDB           ;                       if (chanal<PPM_PULSE_COUNT && rx_data[n*2+2]!=0xFF)
 0BDB 3C0107            cmp [L321],7
 0BDE D0E0              jnc L331
 0BE0           X44:
 0BE0 5200              mov A,[X+0]
 0BE2 64                asl A
 0BE3 0102              add A,<_mem+2
 0BE5 5300              mov [__r1],A
 0BE7 3E00              mvi A,[__r1]
 0BE9 39FF              cmp A,-1
 0BEB A0D3              jz L331
 0BED                   .dbline 740
 0BED           ;                               //extract chanal value
 0BED           ;                       {
 0BED           ;                               if (bits==10)
 0BED                   .dbline 740
 0BED 3C000A            cmp [L316],10
 0BF0 B021              jnz L334
 0BF2                   .dbline 742
 0BF2           ;                               {
 0BF2           ;                                       value=(((WORD)rx_data[n*2+2]<<8)+rx_data[n*2+3])&0x3FF;
 0BF2                   .dbline 742
 0BF2 5200              mov A,[X+0]
 0BF4 64                asl A
 0BF5 5300              mov [__r1],A
 0BF7 0103              add A,<_mem+3
 0BF9 5300              mov [__r3],A
 0BFB 3E00              mvi A,[__r3]
 0BFD 5300              mov [__r2],A
 0BFF 060002            add [__r1],<_mem+2
 0C02 3E00              mvi A,[__r1]
 0C04 5300              mov [__r0],A
 0C06 5100              mov A,[__r2]
 0C08 5303              mov [L322+1],A
 0C0A 5100              mov A,[__r0]
 0C0C 2103              and A,3
 0C0E 5302              mov [L322],A
 0C10                   .dbline 743
 0C10           ;                               }
 0C10 801F              xjmp L335
 0C12           L334:
 0C12                   .dbline 745
 0C12           ;                               else
 0C12           ;                               {
 0C12                   .dbline 746
 0C12           ;                                       value=(((WORD)rx_data[n*2+2]<<8)+rx_data[n*2+3])&0x7FF;
 0C12 5200              mov A,[X+0]
 0C14 64                asl A
 0C15 5300              mov [__r1],A
 0C17 0103              add A,<_mem+3
 0C19 5300              mov [__r3],A
 0C1B 3E00              mvi A,[__r3]
 0C1D 5300              mov [__r2],A
 0C1F 060002            add [__r1],<_mem+2
 0C22 3E00              mvi A,[__r1]
 0C24 5300              mov [__r0],A
 0C26 5100              mov A,[__r2]
 0C28 5303              mov [L322+1],A
 0C2A 5100              mov A,[__r0]
 0C2C 2107              and A,7
 0C2E 5302              mov [L322],A
 0C30                   .dbline 747
 0C30           ;                               }
 0C30           L335:
 0C30                   .dbline 750
 0C30           ;                               //PPM has resulution of 2000/1ms so 10 Bit datta (0 to 1024) needs to be multipleid by 2
 0C30           ;                               //best would be a linear scale like "Value=PPM_MIN + (value*(PPM_MAX-PPM_MIN))/(1<<Bits)" but that takes to mutch time.
 0C30           ;                               if (bits==10) 
 0C30 3C000A            cmp [L316],10
 0C33 B023              jnz L340
 0C35                   .dbline 751
 0C35           ;                                       ppm_Data[chanal]=PPM_OFFSET+ value*2;
 0C35 5F0003            mov [__r1],[L322+1]
 0C38 5F0002            mov [__r0],[L322]
 0C3B 6500              asl [__r1]
 0C3D 6B00              rlc [__r0]
 0C3F 0600B8            add [__r1],-72
 0C42 0E0007            adc [__r0],7
 0C45 5F0001            mov [__r3],[L321]
 0C48 6500              asl [__r3]
 0C4A 060024            add [__r3],<_ppm_Data
 0C4D 5100              mov A,[__r0]
 0C4F 3F00              mvi [__r3],A
 0C51 5100              mov A,[__r1]
 0C53 3F00              mvi [__r3],A
 0C55 8019              xjmp L341
 0C57           L340:
 0C57                   .dbline 753
 0C57           ;                               else 
 0C57           ;                                       ppm_Data[chanal]=PPM_OFFSET+ value;
 0C57 5103              mov A,[L322+1]
 0C59 01B8              add A,-72
 0C5B 5300              mov [__r1],A
 0C5D 5102              mov A,[L322]
 0C5F 0907              adc A,7
 0C61 5F0001            mov [__r3],[L321]
 0C64 6500              asl [__r3]
 0C66 060024            add [__r3],<_ppm_Data
 0C69 3F00              mvi [__r3],A
 0C6B 5100              mov A,[__r1]
 0C6D 3F00              mvi [__r3],A
 0C6F           L341:
 0C6F                   .dbline 755
 0C6F           ;                               //limit to MIN / MAX
 0C6F           ;                               if (PPM_OUT_MAX_LEN<ppm_Data[chanal])
 0C6F 5F0001            mov [__r1],[L321]
 0C72 6500              asl [__r1]
 0C74 060024            add [__r1],<_ppm_Data
 0C77 3E00              mvi A,[__r1]
 0C79 5300              mov [__r0],A
 0C7B 3E00              mvi A,[__r1]
 0C7D 5300              mov [__r1],A
 0C7F 50B8              mov A,-72
 0C81 1200              sub A,[__r1]
 0C83 500F              mov A,15
 0C85 1A00              sbb A,[__r0]
 0C87 D011              jnc L342
 0C89           X45:
 0C89                   .dbline 756
 0C89           ;                                       ppm_Data[chanal]=PPM_OUT_MAX_LEN;
 0C89 5F0001            mov [__r1],[L321]
 0C8C 6500              asl [__r1]
 0C8E 060024            add [__r1],<_ppm_Data
 0C91 500F              mov A,15
 0C93 3F00              mvi [__r1],A
 0C95 50B8              mov A,-72
 0C97 3F00              mvi [__r1],A
 0C99           L342:
 0C99                   .dbline 757
 0C99           ;                               if (PPM_OUT_MIN_LEN>ppm_Data[chanal])
 0C99 5F0001            mov [__r1],[L321]
 0C9C 6500              asl [__r1]
 0C9E 060024            add [__r1],<_ppm_Data
 0CA1 3E00              mvi A,[__r1]
 0CA3 5300              mov [__r0],A
 0CA5 3E00              mvi A,[__r1]
 0CA7 11B8              sub A,-72
 0CA9 5100              mov A,[__r0]
 0CAB 1907              sbb A,7
 0CAD D011              jnc L344
 0CAF           X46:
 0CAF                   .dbline 758
 0CAF           ;                                       ppm_Data[chanal]=PPM_OUT_MIN_LEN;
 0CAF 5F0001            mov [__r1],[L321]
 0CB2 6500              asl [__r1]
 0CB4 060024            add [__r1],<_ppm_Data
 0CB7 5007              mov A,7
 0CB9 3F00              mvi [__r1],A
 0CBB 50B8              mov A,-72
 0CBD 3F00              mvi [__r1],A
 0CBF           L344:
 0CBF                   .dbline 759
 0CBF           ;                       }
 0CBF           L331:
 0CBF                   .dbline 760
 0CBF           ;               }
 0CBF           L324:
 0CBF                   .dbline 730
 0CBF 7700              inc [X+0]
 0CC1           L326:
 0CC1                   .dbline 730
 0CC1 3D0007            cmp [X+0],7
 0CC4 CEF0              jc L323
 0CC6           X47:
 0CC6                   .dbline 761
 0CC6           ;               return 1;
 0CC6 5001              mov A,1
 0CC8 8003              xjmp L315
 0CCA           L319:
 0CCA                   .dbline 763
 0CCA           ;       }
 0CCA           ;       return 0;
 0CCA 5000              mov A,0
 0CCC                   .dbline -2
 0CCC           L315:
 0CCC 38FF              add SP,-1
 0CCE 20                pop X
 0CCF                   .dbline 0 ; func end
 0CCF 7F                ret
 0CD0                   .dbsym l n 0 c
 0CD0                   .dbend
 0CD0                   .dbfunc e DSM_Save_Failsafe_Presets _DSM_Save_Failsafe_Presets fV
 0CD0           ;              n -> X+0
 0CD0           _DSM_Save_Failsafe_Presets::
 0CD0                   .dbline -1
 0CD0 10                push X
 0CD1 4F                mov X,SP
 0CD2 3801              add SP,1
 0CD4                   .dbline 767
 0CD4           ; }
 0CD4           ; 
 0CD4           ; void DSM_Save_Failsafe_Presets(void)
 0CD4           ; {
 0CD4                   .dbline 773
 0CD4           ; BYTE n;
 0CD4           ; #ifdef DEBUG
 0CD4           ;       LED_1_6_Invert();
 0CD4           ;       LED_1_6_Invert();
 0CD4           ; #endif
 0CD4           ;       for(n=0;n<PPM_PULSE_COUNT;n++)
 0CD4 560000            mov [X+0],0
 0CD7 802A              xjmp L350
 0CD9           L347:
 0CD9                   .dbline 774
 0CD9           ;       {       
 0CD9                   .dbline 775
 0CD9           ;               ppm_fs_Data[n]=ppm_Data[n];
 0CD9 5200              mov A,[X+0]
 0CDB 5300              mov [__r1],A
 0CDD 550000            mov [__r0],0
 0CE0 6500              asl [__r1]
 0CE2 6B00              rlc [__r0]
 0CE4 5100              mov A,[__r1]
 0CE6 0124              add A,<_ppm_Data
 0CE8 5300              mov [__r3],A
 0CEA 3E00              mvi A,[__r3]
 0CEC 5300              mov [__r2],A
 0CEE 3E00              mvi A,[__r3]
 0CF0 5300              mov [__r3],A
 0CF2 06003A            add [__r1],<_config+8
 0CF5 0E003A            adc [__r0],>_config+8
 0CF8 5100              mov A,[__r2]
 0CFA 3F00              mvi [__r1],A
 0CFC 5100              mov A,[__r3]
 0CFE 3F00              mvi [__r1],A
 0D00                   .dbline 776
 0D00           ;       }
 0D00           L348:
 0D00                   .dbline 773
 0D00 7700              inc [X+0]
 0D02           L350:
 0D02                   .dbline 773
 0D02 3D0007            cmp [X+0],7
 0D05 CFD3              jc L347
 0D07           X48:
 0D07                   .dbline 777
 0D07           ; Preste_Failsafe=TRUE;
 0D07 553901            mov [_config+7],1
 0D0A                   .dbline -2
 0D0A           L346:
 0D0A 38FF              add SP,-1
 0D0C 20                pop X
 0D0D                   .dbline 0 ; func end
 0D0D 7F                ret
 0D0E                   .dbsym l n 0 c
 0D0E                   .dbend
 0D0E                   .dbfunc e DSM_Load_FS_Data _DSM_Load_FS_Data fV
 0D0E           ;              n -> X+0
 0D0E           _DSM_Load_FS_Data::
 0D0E                   .dbline -1
 0D0E 10                push X
 0D0F 4F                mov X,SP
 0D10 3801              add SP,1
 0D12                   .dbline 781
 0D12           ; }
 0D12           ; 
 0D12           ; void DSM_Load_FS_Data(void)
 0D12           ; {
 0D12                   .dbline 787
 0D12           ; BYTE n;
 0D12           ; #ifdef DEBUG
 0D12           ;       LED_1_6_Invert();
 0D12           ;       LED_1_6_Invert();
 0D12           ; #endif
 0D12           ;       if (Preste_Failsafe)
 0D12 3C3900            cmp [_config+7],0
 0D15 A036              jz L354
 0D17                   .dbline 789
 0D17           ;       {
 0D17           ;               for(n=0;n<PPM_PULSE_COUNT;n++)
 0D17                   .dbline 789
 0D17 560000            mov [X+0],0
 0D1A 802A              xjmp L360
 0D1C           L357:
 0D1C                   .dbline 790
 0D1C           ;               {       
 0D1C                   .dbline 791
 0D1C           ;                       ppm_Data[n]=ppm_fs_Data[n];
 0D1C 5200              mov A,[X+0]
 0D1E 5300              mov [__r1],A
 0D20 550000            mov [__r0],0
 0D23 6500              asl [__r1]
 0D25 6B00              rlc [__r0]
 0D27 5100              mov A,[__r1]
 0D29 013A              add A,<_config+8
 0D2B 5300              mov [__r3],A
 0D2D 3E00              mvi A,[__r3]
 0D2F 5300              mov [__r2],A
 0D31 3E00              mvi A,[__r3]
 0D33 5300              mov [__r3],A
 0D35 060024            add [__r1],<_ppm_Data
 0D38 0E0024            adc [__r0],>_ppm_Data
 0D3B 5100              mov A,[__r2]
 0D3D 3F00              mvi [__r1],A
 0D3F 5100              mov A,[__r3]
 0D41 3F00              mvi [__r1],A
 0D43                   .dbline 792
 0D43           ;               }
 0D43           L358:
 0D43                   .dbline 789
 0D43 7700              inc [X+0]
 0D45           L360:
 0D45                   .dbline 789
 0D45 3D0007            cmp [X+0],7
 0D48 CFD3              jc L357
 0D4A           X49:
 0D4A                   .dbline 793
 0D4A           ;       }
 0D4A 8007              xjmp L355
 0D4C           L354:
 0D4C                   .dbline 795
 0D4C           ;       else 
 0D4C           ;       {
 0D4C                   .dbline 796
 0D4C           ;               ppm_Data[0]=PPM_OUT_MIN_LEN;
 0D4C 5525B8            mov [_ppm_Data+1],-72
 0D4F 552407            mov [_ppm_Data],7
 0D52                   .dbline 797
 0D52           ;       }
 0D52           L355:
 0D52                   .dbline -2
 0D52           L353:
 0D52 38FF              add SP,-1
 0D54 20                pop X
 0D55                   .dbline 0 ; func end
 0D55 7F                ret
 0D56                   .dbsym l n 0 c
 0D56                   .dbend
                        .area bss(ram, con, rel)
 0004                   .dbfile E:\WORKSP~1\cypress\DS400A~1\DSM_RE~1\dsm.c
 0004           _bind_channal::
 0004                   .blkb 1
 0005                   .dbsym e bind_channal _bind_channal c
 0005           _Bind_cnt::
 0005                   .blkb 1
 0006                   .dbsym e Bind_cnt _Bind_cnt c
 0006           _New_RCV_Data::
 0006                   .blkb 1
 0007                   .dbsym e New_RCV_Data _New_RCV_Data c
 0007           _lost_cnt::
 0007                   .blkb 1
 0008                   .dbsym e lost_cnt _lost_cnt c
 0008           _num_channels::
 0008                   .blkb 1
 0009                   .dbsym e num_channels _num_channels c
 0009           _data_col::
 0009                   .blkb 1
 000A                   .dbsym e data_col _data_col c
 000A           _sop_col::
 000A                   .blkb 1
 000B                   .dbsym e sop_col _sop_col c
 000B           _Ch_A::
 000B                   .blkb 1
 000C                   .dbsym e Ch_A _Ch_A c
 000C           _chidx::
 000C                   .blkb 1
 000D                   .dbsym e chidx _chidx c
 000D           _channels::
 000D                   .blkb 23
 0024                   .dbsym e channels _channels A[23:23]c
 0024           _ppm_Data::
 0024                   .blkb 14
 0032                   .dbsym e ppm_Data _ppm_Data A[14:7]i
 0032           _config::
 0032                   .blkb 22
 0048                   .dbstruct 0 22 config_s
 0048                   .dbfield 0 mfg_id A[4:4]c
 0048                   .dbfield 4 Is_DSMX c
 0048                   .dbfield 5 Is_11ms c
 0048                   .dbfield 6 Is_11Bit c
 0048                   .dbfield 7 Preste_Failsafe c
 0048                   .dbfield 8 ppm_fs_Data A[14:7]i
 0048                   .dbend
 0048                   .dbsym e config _config S[config_s]
 0048           _Rcv_Timeout::
 0048                   .blkb 1
 0049                   .dbsym e Rcv_Timeout _Rcv_Timeout c
 0049           _new_data::
 0049                   .blkb 1
 004A                   .dbsym e new_data _new_data c
 004A           _State::
 004A                   .blkb 1
 004B                   .dbsym e State _State c
 004B           _DSM_Perriode::
 004B                   .blkb 2
 004D                   .dbsym e DSM_Perriode _DSM_Perriode i
                        .area func_lit(rom, con, rel, proclab)
 0000 098B      PL_Bind_xfer_cb:        .word _Bind_xfer_cb
 0002 0000      PL0:    .word 0
 0004 09F6      PL_Bind_TimeOut_cb:     .word _Bind_TimeOut_cb
 0006 02C5      PL_Rcv_X_TimeOut_cb:    .word _Rcv_X_TimeOut_cb
 0008 0235      PL_SYNC_AB_TimeOut_cb:  .word _SYNC_AB_TimeOut_cb
 000A 0264      PL_SYNC_X_TimeOut_cb:   .word _SYNC_X_TimeOut_cb
