                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _LV_Detect::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile ./main.c
 0001                   .dbfile E:\WORKSP~1\cypress\DSM_RE~1\DSM_RE~1\main.c
 0001                   .dbsym e LV_Detect _LV_Detect c
                        .area text(rom, con, rel)
 0000                   .dbfile E:\WORKSP~1\cypress\DSM_RE~1\DSM_RE~1\main.c
 0000                   .dbfunc e LVD_ISR _LVD_ISR fV
 0000           _LVD_ISR::
 0000                   .dbline -1
 0000 08                push A
 0001                   .dbline 26
 0001           ; //----------------------------------------------------------------------------
 0001           ; // C main line
 0001           ; //----------------------------------------------------------------------------
 0001           ; 
 0001           ; //98000BFE295413FE26A81BFE0154 //DSMX
 0001           ; 
 0001           ; //900005FF14AA09FF13540DFF00AA   //DSM2
 0001           ; 
 0001           ; #include <m8c.h>        // part specific constants and macros
 0001           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0001           ; #include "timer.h"
 0001           ; #include "CYRF6936.h"
 0001           ; #include "DSM.h"
 0001           ; #include "config.h"
 0001           ; #include "ppm.h"
 0001           ; 
 0001           ; 
 0001           ; 
 0001           ; //global data
 0001           ; BOOL LV_Detect=FALSE;
 0001           ; //#define DEBUG
 0001           ; 
 0001           ; // Declare LVD_ISR as ISR
 0001           ; #pragma interrupt_handler LVD_ISR
 0001           ; void LVD_ISR(void)
 0001           ; {
 0001                   .dbline 27
 0001           ;       LV_Detect=TRUE;
 0001 550001            mov [_LV_Detect],1
 0004                   .dbline 28
 0004           ;       M8C_ClearIntFlag(INT_MSK0,INT_MSK0_VOLTAGE_MONITOR);
 0004 41E0FE            and REG[0xe0],-2
 0007                   .dbline 29
 0007           ;       M8C_DisableIntMask(INT_MSK0,INT_MSK0_VOLTAGE_MONITOR); 
 0007 41E0FE            and REG[0xe0],-2
 000A                   .dbline -2
 000A           L11:
 000A 18                pop A
 000B                   .dbline 0 ; func end
 000B 7E                reti
 000C                   .dbend
 000C                   .dbfunc e main _main fV
 000C           ;              n -> X+5
 000C           ;           Bind -> X+0
 000C           _main::
 000C                   .dbline -1
 000C 10                push X
 000D 4F                mov X,SP
 000E 380C              add SP,12
 0010                   .dbline 34
 0010           ; }
 0010           ; 
 0010           ; 
 0010           ; void main(void)
 0010           ; {
 0010                   .dbline 39
 0010           ;       BOOL Bind;
 0010           ;       //initialize everiting
 0010           ; 
 0010           ;       //enable glogal interrupts
 0010           ;       M8C_EnableGInt;         
 0010 7101                      or  F, 01h
 0012           
 0012                   .dbline 40
 0012           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_VOLTAGE_MONITOR); 
 0012 43E001            or REG[0xe0],1
 0015                   .dbline 41
 0015           ;       ppm_Init();
 0015 7C0000            xcall _ppm_Init
 0018                   .dbline 43
 0018           ; 
 0018           ;       LED_1_Start();
 0018 10                push X
 0019 7C0000            xcall _LED_1_Start
 001C                   .dbline 44
 001C           ;       CH0_OUT_Start();
 001C 7C0000            xcall _CH0_OUT_Start
 001F                   .dbline 45
 001F           ;       CH1_OUT_Start();
 001F 7C0000            xcall _CH1_OUT_Start
 0022                   .dbline 46
 0022           ;       CH2_OUT_Start();
 0022 7C0000            xcall _CH2_OUT_Start
 0025                   .dbline 47
 0025           ;       CH3_OUT_Start();
 0025 7C0000            xcall _CH3_OUT_Start
 0028                   .dbline 48
 0028           ;       CH4_OUT_Start();
 0028 7C0000            xcall _CH4_OUT_Start
 002B                   .dbline 49
 002B           ;       CH5_OUT_Start();
 002B 7C0000            xcall _CH5_OUT_Start
 002E 20                pop X
 002F                   .dbline 50
 002F           ;       Timer_init();
 002F 7C0000            xcall _Timer_init
 0032                   .dbline 51
 0032           ;       DSM_Init();
 0032 7C0000            xcall _DSM_Init
 0035                   .dbline 54
 0035           ; 
 0035           ; #ifndef DEBUG
 0035           ;       E2PROM_1_Start();
 0035 10                push X
 0036 7C0000            xcall _E2PROM_1_Start
 0039 20                pop X
 003A                   .dbline 58
 003A           ; #endif
 003A           ; 
 003A           ; 
 003A           ; Bind=(Bind_Port_Data_ADDR&Bind_Port_MASK)?FALSE:TRUE;
 003A 5D0C              mov A,REG[0xc]
 003C 5300              mov [__r0],A
 003E 470004            tst [__r0],4
 0041 A009              jz L14
 0043 560200            mov [X+2],0
 0046 560100            mov [X+1],0
 0049 8007              xjmp L15
 004B           L14:
 004B 560201            mov [X+2],1
 004E 560100            mov [X+1],0
 0051           L15:
 0051 5202              mov A,[X+2]
 0053 5400              mov [X+0],A
 0055                   .dbline 59
 0055           ; Bind=Bind||!ReadConfig(&config,sizeof (config_s));    
 0055 3D0000            cmp [X+0],0
 0058 B013              jnz L19
 005A 5016              mov A,22
 005C 08                push A
 005D 5000              mov A,>_config
 005F 08                push A
 0060 5000              mov A,<_config
 0062 08                push A
 0063 7C0000            xcall _ReadConfig
 0066 38FD              add SP,-3
 0068 3900              cmp A,0
 006A B009              jnz L17
 006C           L19:
 006C 560401            mov [X+4],1
 006F 560300            mov [X+3],0
 0072 8007              xjmp L18
 0074           L17:
 0074 560400            mov [X+4],0
 0077 560300            mov [X+3],0
 007A           L18:
 007A 5204              mov A,[X+4]
 007C 5400              mov [X+0],A
 007E                   .dbline 62
 007E           ;       
 007E           ; 
 007E           ; if (Bind)
 007E 3D0000            cmp [X+0],0
 0081 A0E1              jz L20
 0083                   .dbline 64
 0083           ;       {
 0083           ;       BYTE n=0;
 0083                   .dbline 64
 0083 560500            mov [X+5],0
 0086                   .dbline 65
 0086           ;       DSM_initialize_bind();
 0086 7C0000            xcall _DSM_initialize_bind
 0089           L22:
 0089                   .dbline 67
 0089           ;       do
 0089           ;               {
 0089                   .dbline 68
 0089           ;               if (LV_Detect)  
 0089 3C0000            cmp [_LV_Detect],0
 008C A031              jz L25
 008E                   .dbline 69
 008E           ;                       LED_1_Switch((SleepTimer_1_iGetTickCntr()&0x340)==0x340?1:0);
 008E 10                push X
 008F 7C0000            xcall _SleepTimer_1_iGetTickCntr
 0092 5A00              mov [__r0],X
 0094 5300              mov [__r1],A
 0096 20                pop X
 0097 260040            and [__r1],64
 009A 260003            and [__r0],3
 009D 3C0003            cmp [__r0],3
 00A0 B00E              jnz L28
 00A2 3C0040            cmp [__r1],64
 00A5 B009              jnz L28
 00A7           X1:
 00A7 560701            mov [X+7],1
 00AA 560600            mov [X+6],0
 00AD 8007              xjmp L29
 00AF           L28:
 00AF 560700            mov [X+7],0
 00B2 560600            mov [X+6],0
 00B5           L29:
 00B5 5207              mov A,[X+7]
 00B7 10                push X
 00B8 7C0000            xcall _LED_1_Switch
 00BB 20                pop X
 00BC 8066              xjmp L26
 00BE           L25:
 00BE                   .dbline 70
 00BE           ;               else if (DSM_BIND_WAIT())
 00BE 3C0002            cmp [_State],2
 00C1 D031              jnc L30
 00C3           X2:
 00C3                   .dbline 71
 00C3           ;                       LED_1_Switch((SleepTimer_1_iGetTickCntr()&0x100)==0x100?1:0);
 00C3 10                push X
 00C4 7C0000            xcall _SleepTimer_1_iGetTickCntr
 00C7 5A00              mov [__r0],X
 00C9 5300              mov [__r1],A
 00CB 20                pop X
 00CC 260000            and [__r1],0
 00CF 260001            and [__r0],1
 00D2 3C0001            cmp [__r0],1
 00D5 B00E              jnz L33
 00D7 3C0000            cmp [__r1],0
 00DA B009              jnz L33
 00DC           X3:
 00DC 560901            mov [X+9],1
 00DF 560800            mov [X+8],0
 00E2 8007              xjmp L34
 00E4           L33:
 00E4 560900            mov [X+9],0
 00E7 560800            mov [X+8],0
 00EA           L34:
 00EA 5209              mov A,[X+9]
 00EC 10                push X
 00ED 7C0000            xcall _LED_1_Switch
 00F0 20                pop X
 00F1 8031              xjmp L31
 00F3           L30:
 00F3                   .dbline 72
 00F3           ;               else if (DSM_BIND_ACK())
 00F3 3C0003            cmp [_State],3
 00F6 C02C              jc L35
 00F8           X4:
 00F8                   .dbline 73
 00F8           ;                       LED_1_Switch((SleepTimer_1_iGetTickCntr()&0x40)==0x40?1:0);
 00F8 10                push X
 00F9 7C0000            xcall _SleepTimer_1_iGetTickCntr
 00FC 5A00              mov [__r0],X
 00FE 5300              mov [__r1],A
 0100 20                pop X
 0101 260040            and [__r1],64
 0104 260000            and [__r0],0
 0107 B00E              jnz L38
 0109 3C0040            cmp [__r1],64
 010C B009              jnz L38
 010E           X5:
 010E 560B01            mov [X+11],1
 0111 560A00            mov [X+10],0
 0114 8007              xjmp L39
 0116           L38:
 0116 560B00            mov [X+11],0
 0119 560A00            mov [X+10],0
 011C           L39:
 011C 520B              mov A,[X+11]
 011E 10                push X
 011F 7C0000            xcall _LED_1_Switch
 0122 20                pop X
 0123           L35:
 0123           L31:
 0123           L26:
 0123                   .dbline 74
 0123           ;               DSM_Cyclic();
 0123 7C0000            xcall _DSM_Cyclic
 0126                   .dbline 75
 0126           ;               }
 0126           L23:
 0126                   .dbline 77
 0126           ;       //wait till binding is done
 0126           ;       while(!DSM_BIND_DONE());
 0126 3C000B            cmp [_State],11
 0129 CF5F              jc L22
 012B           X6:
 012B           L40:
 012B                   .dbline 80
 012B           ;       
 012B           ;       do      //wait for stable
 012B           ;               {
 012B                   .dbline 81
 012B           ;                       if (new_data)
 012B 3C0000            cmp [_new_data],0
 012E A006              jz L43
 0130                   .dbline 83
 0130           ;                               {
 0130           ;                               new_data=0;     
 0130                   .dbline 83
 0130 550000            mov [_new_data],0
 0133                   .dbline 84
 0133           ;                               n++;    
 0133 7705              inc [X+5]
 0135                   .dbline 85
 0135           ;                               }
 0135           L43:
 0135                   .dbline 86
 0135           ;               DSM_Cyclic();
 0135 7C0000            xcall _DSM_Cyclic
 0138                   .dbline 87
 0138           ;               }
 0138           L41:
 0138                   .dbline 88
 0138           ;       while (n<5);
 0138 3D0505            cmp [X+5],5
 013B CFEF              jc L40
 013D           X7:
 013D                   .dbline 91
 013D           ;               
 013D           ;       //save falisave position
 013D           ;       if(Bind_Port_Data_ADDR&Bind_Port_MASK)
 013D 5D0C              mov A,REG[0xc]
 013F 5300              mov [__r0],A
 0141 470004            tst [__r0],4
 0144 A004              jz L45
 0146                   .dbline 93
 0146           ;       {
 0146           ;                       DSM_Save_Failsafe_Presets();
 0146                   .dbline 93
 0146 7C0000            xcall _DSM_Save_Failsafe_Presets
 0149                   .dbline 94
 0149           ;       }
 0149           L45:
 0149                   .dbline 98
 0149           ;       
 0149           ; 
 0149           ;       //save configuration to FLASH
 0149           ;       Timer_Stop();
 0149 10                push X
 014A 7C0000            xcall _Timer8_1_Stop
 014D 20                pop X
 014E                   .dbline 99
 014E           ;       SaveConfig(&config,sizeof (config_s));
 014E 5016              mov A,22
 0150 08                push A
 0151 5000              mov A,>_config
 0153 08                push A
 0154 5000              mov A,<_config
 0156 08                push A
 0157 7C0000            xcall _SaveConfig
 015A 38FD              add SP,-3
 015C                   .dbline 100
 015C           ;       Timer_Start();
 015C 10                push X
 015D 7C0000            xcall _Timer8_1_Start
 0160 20                pop X
 0161                   .dbline 101
 0161           ;       }
 0161 8012              xjmp L21
 0163           L20:
 0163                   .dbline 103
 0163           ;       else 
 0163           ;       {
 0163                   .dbline 104
 0163           ;               DSM_initialize_Recive();        
 0163 7C0000            xcall _DSM_initialize_Recive
 0166           L47:
 0166                   .dbline 106
 0166           ;               do 
 0166           ;               {
 0166                   .dbline 107
 0166           ;                       Rcv_Timeout=FALSE;
 0166 550000            mov [_Rcv_Timeout],0
 0169                   .dbline 108
 0169           ;                       new_data=FALSE; 
 0169 550000            mov [_new_data],0
 016C                   .dbline 109
 016C           ;                       DSM_Cyclic();
 016C 7C0000            xcall _DSM_Cyclic
 016F                   .dbline 110
 016F           ;               }while (!DSM_INSYNC());
 016F           L48:
 016F                   .dbline 110
 016F 3C000B            cmp [_State],11
 0172 CFF3              jc L47
 0174           X8:
 0174                   .dbline 111
 0174           ;       }
 0174           L21:
 0174           L50:
 0174                   .dbline 113
 0174           ;               do
 0174           ;                       {
 0174                   .dbline 114
 0174           ;                       DSM_Cyclic();
 0174 7C0000            xcall _DSM_Cyclic
 0177                   .dbline 115
 0177           ;                       if (LV_Detect)  
 0177 3C0000            cmp [_LV_Detect],0
 017A A031              jz L53
 017C                   .dbline 116
 017C           ;                               LED_1_Switch((SleepTimer_1_iGetTickCntr()&0x340)==0x340?1:0);
 017C 10                push X
 017D 7C0000            xcall _SleepTimer_1_iGetTickCntr
 0180 5A00              mov [__r0],X
 0182 5300              mov [__r1],A
 0184 20                pop X
 0185 260040            and [__r1],64
 0188 260003            and [__r0],3
 018B 3C0003            cmp [__r0],3
 018E B00E              jnz L56
 0190 3C0040            cmp [__r1],64
 0193 B009              jnz L56
 0195           X9:
 0195 560601            mov [X+6],1
 0198 560500            mov [X+5],0
 019B 8007              xjmp L57
 019D           L56:
 019D 560600            mov [X+6],0
 01A0 560500            mov [X+5],0
 01A3           L57:
 01A3 5206              mov A,[X+6]
 01A5 10                push X
 01A6 7C0000            xcall _LED_1_Switch
 01A9 20                pop X
 01AA 801B              xjmp L54
 01AC           L53:
 01AC                   .dbline 118
 01AC           ;                       else    
 01AC           ;                               LED_1_Switch(DSM_INSYNC());
 01AC 3C000B            cmp [_State],11
 01AF C009              jc L59
 01B1           X10:
 01B1 560801            mov [X+8],1
 01B4 560700            mov [X+7],0
 01B7 8007              xjmp L60
 01B9           L59:
 01B9 560800            mov [X+8],0
 01BC 560700            mov [X+7],0
 01BF           L60:
 01BF 5208              mov A,[X+8]
 01C1 10                push X
 01C2 7C0000            xcall _LED_1_Switch
 01C5 20                pop X
 01C6           L54:
 01C6                   .dbline 119
 01C6           ;                       if (Rcv_Timeout)
 01C6 3C0000            cmp [_Rcv_Timeout],0
 01C9 A00A              jz L61
 01CB                   .dbline 121
 01CB           ;                       {
 01CB           ;                               DSM_Load_FS_Data();
 01CB                   .dbline 121
 01CB 7C0000            xcall _DSM_Load_FS_Data
 01CE                   .dbline 122
 01CE           ;                               Rcv_Timeout=FALSE;
 01CE 550000            mov [_Rcv_Timeout],0
 01D1                   .dbline 123
 01D1           ;                               new_data=TRUE;
 01D1 550001            mov [_new_data],1
 01D4                   .dbline 124
 01D4           ;                       }
 01D4           L61:
 01D4                   .dbline 125
 01D4           ;                       if (PPM_IS_PPM_DONE())
 01D4 3C0000            cmp [_ppm_Run],0
 01D7 B00C              jnz L63
 01D9                   .dbline 127
 01D9           ;                               {
 01D9           ;                               if (new_data)
 01D9                   .dbline 127
 01D9 3C0000            cmp [_new_data],0
 01DC A007              jz L65
 01DE                   .dbline 129
 01DE           ;                                       {
 01DE           ;                                       new_data=FALSE; 
 01DE                   .dbline 129
 01DE 550000            mov [_new_data],0
 01E1                   .dbline 130
 01E1           ;                                       PPM_START_ONE_PPM_TRAIN();
 01E1 7C0000            xcall _PPM_Start_One_PPM_Train
 01E4                   .dbline 131
 01E4           ;                                       }
 01E4           L65:
 01E4                   .dbline 132
 01E4           ;                               }
 01E4           L63:
 01E4                   .dbline 133
 01E4           ;                       }
 01E4           L51:
 01E4                   .dbline 134
 01E4           ;               while (1);      
 01E4 8F8F              xjmp L50
 01E6           X0:
 01E6                   .dbline -2
 01E6           L12:
 01E6 38F4              add SP,-12
 01E8 20                pop X
 01E9                   .dbline 0 ; func end
 01E9 8FFF              jmp .
 01EB                   .dbsym l n 5 c
 01EB                   .dbsym l Bind 0 c
 01EB                   .dbend
